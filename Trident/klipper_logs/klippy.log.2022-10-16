=============== Log rollover at Sun Oct 16 00:17:19 2022 ===============
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 00:17:21 2022 (1665875841.3 24.3)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[mcu tool]
canbus_uuid = af495e03c350

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
Loaded MCU 'mcu' 105 commands (v0.10.0-546-ga709ba43 / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c3=PA8,PC9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_i2c1a=PB8,PB9 RESERVE_PINS_USB=PA11,PA12 CLOCK_FREQ=180000000 BUS_PINS_spi1a=PB4,PB5,PB3 STATS_SUMSQ_BASE=256 BUS_PINS_spi3=PB4,PB5,PB3 STEPPER_BOTH_EDGE=1 ADC_MAX=4095 BUS_PINS_spi4=PE13,PE14,PE12 PWM_MAX=255 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi1=PA6,PA7,PA5 RESERVE_PINS_crystal=PH0,PH1 MCU=stm32f446xx
mcu 'tool': Starting CAN connect
Created a socket
webhooks client 3018262728: New connection
webhooks client 3018262728: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
error: mcu 'tool': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2870): Sun Sep 18 04:32:49 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32f103xe"
CONFIG_CLOCK_FREQ=72000000
CONFIG_FLASH_START=0x8000800
CONFIG_FLASH_SIZE=0x10000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x5000
CONFIG_STACK_SIZE=512
CONFIG_STM32_SELECT=y
CONFIG_MACH_STM32F103=y
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G0B1 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_STM32F103x6 is not set
CONFIG_MACH_STM32F1=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_CANBUS=y
# CONFIG_STM32F103GD_DISABLE_SWD is not set
# CONFIG_STM32_FLASH_START_2000 is not set
# CONFIG_STM32_FLASH_START_5000 is not set
# CONFIG_STM32_FLASH_START_7000 is not set
# CONFIG_STM32_FLASH_START_8000 is not set
# CONFIG_STM32_FLASH_START_8800 is not set
# CONFIG_STM32_FLASH_START_10000 is not set
CONFIG_STM32_FLASH_START_800=y
# CONFIG_STM32_FLASH_START_1000 is not set
# CONFIG_STM32_FLASH_START_4000 is not set
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_STM32_CLOCK_REF_8M=y
# CONFIG_STM32_CLOCK_REF_12M is not set
# CONFIG_STM32_CLOCK_REF_16M is not set
# CONFIG_STM32_CLOCK_REF_20M is not set
# CONFIG_STM32_CLOCK_REF_25M is not set
# CONFIG_STM32_CLOCK_REF_INTERNAL is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
# CONFIG_STM32_USB_PA11_PA12 is not set
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_SERIAL_USART1_ALT_PB7_PB6 is not set
# CONFIG_STM32_SERIAL_USART2 is not set
# CONFIG_STM32_SERIAL_USART2_ALT_PD6_PD5 is not set
# CONFIG_STM32_SERIAL_USART3 is not set
# CONFIG_STM32_SERIAL_USART3_ALT_PD9_PD8 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
CONFIG_STM32_MMENU_CANBUS_PB8_PB9=y
# CONFIG_STM32_MMENU_CANBUS_PD0_PD1 is not set
CONFIG_STM32_CANBUS_PB8_PB9=y
CONFIG_SERIAL_BOOTLOADER_SIDECHANNEL=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANSERIAL=y
CONFIG_CANBUS=y
CONFIG_CANBUS_FREQUENCY=250000
CONFIG_CANBUS_FILTER=y
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7665): Sat Oct 15 21:25:23 2022
Last MCU build version: v0.10.0-608-g638303b3
Last MCU build tools: gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1
Last MCU build config: BUS_PINS_i2c1=PB6,PB7 RECEIVE_WINDOW=192 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_i2c1a=PB8,PB9 RESERVE_PINS_CAN=PB8,PB9 CANBUS_FREQUENCY=250000 STEPPER_BOTH_EDGE=1 ADC_MAX=4095 BUS_PINS_spi3=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi1=PA6,PA7,PA5 PWM_MAX=255 MCU=stm32f103xe STATS_SUMSQ_BASE=256 BUS_PINS_spi1a=PB4,PB5,PB3 CLOCK_FREQ=72000000
Build file /home/pi/klipper/klippy/../out/klipper.elf(292992): Sat Oct 15 21:25:28 2022
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 00:39:49 2022 (1665877189.4 23.4)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[mcu tool]
canbus_uuid = af495e03c350

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
Loaded MCU 'mcu' 105 commands (v0.10.0-546-ga709ba43 / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c3=PA8,PC9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_i2c1a=PB8,PB9 RESERVE_PINS_USB=PA11,PA12 CLOCK_FREQ=180000000 BUS_PINS_spi1a=PB4,PB5,PB3 STATS_SUMSQ_BASE=256 BUS_PINS_spi3=PB4,PB5,PB3 STEPPER_BOTH_EDGE=1 ADC_MAX=4095 BUS_PINS_spi4=PE13,PE14,PE12 PWM_MAX=255 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi1=PA6,PA7,PA5 RESERVE_PINS_crystal=PH0,PH1 MCU=stm32f446xx
mcu 'tool': Starting CAN connect
Created a socket
Unhandled exception during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 772, in _mcu_identify
    self._canbus_iface)
  File "/home/pi/klipper/klippy/serialhdl.py", line 137, in connect_canbus
    bustype='socketcan')
  File "/home/pi/klippy-env/local/lib/python2.7/site-packages/can/interface.py", line 127, in __new__
    return cls(channel, *args, **kwargs)
  File "/home/pi/klippy-env/local/lib/python2.7/site-packages/can/interfaces/socketcan/socketcan.py", line 594, in __init__
    bind_socket(self.socket, channel)
  File "/home/pi/klippy-env/local/lib/python2.7/site-packages/can/interfaces/socketcan/socketcan.py", line 462, in bind_socket
    addr = get_addr(sock, channel)
  File "/home/pi/klippy-env/local/lib/python2.7/site-packages/can/interfaces/socketcan/socketcan.py", line 62, in get_addr
    res = fcntl.ioctl(sock, SIOCGIFINDEX, data)
IOError: [Errno 19] No such device
webhooks client 3041845000: New connection
webhooks client 3041845000: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
Attempting MCU 'mcu' reset command
Unable to issue reset command on MCU 'tool'
webhooks client 3041845000: Disconnected
Restarting printer
Start printer at Sun Oct 16 00:43:52 2022 (1665877432.3 137.4)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[mcu tool]
canbus_uuid = af495e03c350

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 3017720416: New connection
webhooks client 3017720416: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
Loaded MCU 'mcu' 105 commands (v0.10.0-546-ga709ba43 / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c3=PA8,PC9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_i2c1a=PB8,PB9 RESERVE_PINS_USB=PA11,PA12 CLOCK_FREQ=180000000 BUS_PINS_spi1a=PB4,PB5,PB3 STATS_SUMSQ_BASE=256 BUS_PINS_spi3=PB4,PB5,PB3 STEPPER_BOTH_EDGE=1 ADC_MAX=4095 BUS_PINS_spi4=PE13,PE14,PE12 PWM_MAX=255 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi1=PA6,PA7,PA5 RESERVE_PINS_crystal=PH0,PH1 MCU=stm32f446xx
mcu 'tool': Starting CAN connect
Created a socket
Unhandled exception during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 772, in _mcu_identify
    self._canbus_iface)
  File "/home/pi/klipper/klippy/serialhdl.py", line 137, in connect_canbus
    bustype='socketcan')
  File "/home/pi/klippy-env/local/lib/python2.7/site-packages/can/interface.py", line 127, in __new__
    return cls(channel, *args, **kwargs)
  File "/home/pi/klippy-env/local/lib/python2.7/site-packages/can/interfaces/socketcan/socketcan.py", line 594, in __init__
    bind_socket(self.socket, channel)
  File "/home/pi/klippy-env/local/lib/python2.7/site-packages/can/interfaces/socketcan/socketcan.py", line 462, in bind_socket
    addr = get_addr(sock, channel)
  File "/home/pi/klippy-env/local/lib/python2.7/site-packages/can/interfaces/socketcan/socketcan.py", line 62, in get_addr
    res = fcntl.ioctl(sock, SIOCGIFINDEX, data)
IOError: [Errno 19] No such device
webhooks client 3017720416: Disconnected
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 00:46:31 2022 (1665877591.0 24.6)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[mcu tool]
canbus_uuid = af495e03c350

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
Loaded MCU 'mcu' 105 commands (v0.10.0-546-ga709ba43 / gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1)
MCU 'mcu' config: BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c3=PA8,PC9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_i2c1a=PB8,PB9 RESERVE_PINS_USB=PA11,PA12 CLOCK_FREQ=180000000 BUS_PINS_spi1a=PB4,PB5,PB3 STATS_SUMSQ_BASE=256 BUS_PINS_spi3=PB4,PB5,PB3 STEPPER_BOTH_EDGE=1 ADC_MAX=4095 BUS_PINS_spi4=PE13,PE14,PE12 PWM_MAX=255 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi1=PA6,PA7,PA5 RESERVE_PINS_crystal=PH0,PH1 MCU=stm32f446xx
mcu 'tool': Starting CAN connect
Created a socket
webhooks client 3019290424: New connection
webhooks client 3019290424: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
Created a socket
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
mcu 'tool': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
error: mcu 'tool': Unable to connect
Build file /home/pi/klipper/klippy/../.config(2870): Sun Sep 18 04:32:49 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
CONFIG_MACH_STM32=y
# CONFIG_MACH_RP2040 is not set
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="stm32"
CONFIG_MCU="stm32f103xe"
CONFIG_CLOCK_FREQ=72000000
CONFIG_FLASH_START=0x8000800
CONFIG_FLASH_SIZE=0x10000
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x5000
CONFIG_STACK_SIZE=512
CONFIG_STM32_SELECT=y
CONFIG_MACH_STM32F103=y
# CONFIG_MACH_STM32F207 is not set
# CONFIG_MACH_STM32F401 is not set
# CONFIG_MACH_STM32F405 is not set
# CONFIG_MACH_STM32F407 is not set
# CONFIG_MACH_STM32F429 is not set
# CONFIG_MACH_STM32F446 is not set
# CONFIG_MACH_STM32F031 is not set
# CONFIG_MACH_STM32F042 is not set
# CONFIG_MACH_STM32F070 is not set
# CONFIG_MACH_STM32F072 is not set
# CONFIG_MACH_STM32G0B1 is not set
# CONFIG_MACH_STM32H743 is not set
# CONFIG_MACH_STM32H750 is not set
# CONFIG_MACH_STM32L412 is not set
# CONFIG_MACH_STM32F103x6 is not set
CONFIG_MACH_STM32F1=y
CONFIG_HAVE_STM32_USBFS=y
CONFIG_HAVE_STM32_CANBUS=y
# CONFIG_STM32F103GD_DISABLE_SWD is not set
# CONFIG_STM32_FLASH_START_2000 is not set
# CONFIG_STM32_FLASH_START_5000 is not set
# CONFIG_STM32_FLASH_START_7000 is not set
# CONFIG_STM32_FLASH_START_8000 is not set
# CONFIG_STM32_FLASH_START_8800 is not set
# CONFIG_STM32_FLASH_START_10000 is not set
CONFIG_STM32_FLASH_START_800=y
# CONFIG_STM32_FLASH_START_1000 is not set
# CONFIG_STM32_FLASH_START_4000 is not set
# CONFIG_STM32_FLASH_START_0000 is not set
CONFIG_STM32_CLOCK_REF_8M=y
# CONFIG_STM32_CLOCK_REF_12M is not set
# CONFIG_STM32_CLOCK_REF_16M is not set
# CONFIG_STM32_CLOCK_REF_20M is not set
# CONFIG_STM32_CLOCK_REF_25M is not set
# CONFIG_STM32_CLOCK_REF_INTERNAL is not set
CONFIG_CLOCK_REF_FREQ=8000000
CONFIG_STM32F0_TRIM=16
# CONFIG_STM32_USB_PA11_PA12 is not set
# CONFIG_STM32_SERIAL_USART1 is not set
# CONFIG_STM32_SERIAL_USART1_ALT_PB7_PB6 is not set
# CONFIG_STM32_SERIAL_USART2 is not set
# CONFIG_STM32_SERIAL_USART2_ALT_PD6_PD5 is not set
# CONFIG_STM32_SERIAL_USART3 is not set
# CONFIG_STM32_SERIAL_USART3_ALT_PD9_PD8 is not set
# CONFIG_STM32_CANBUS_PA11_PA12 is not set
CONFIG_STM32_MMENU_CANBUS_PB8_PB9=y
# CONFIG_STM32_MMENU_CANBUS_PD0_PD1 is not set
CONFIG_STM32_CANBUS_PB8_PB9=y
CONFIG_SERIAL_BOOTLOADER_SIDECHANNEL=y
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANSERIAL=y
CONFIG_CANBUS=y
CONFIG_CANBUS_FREQUENCY=250000
CONFIG_CANBUS_FILTER=y
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(7665): Sat Oct 15 21:25:23 2022
Last MCU build version: v0.10.0-608-g638303b3
Last MCU build tools: gcc: (15:7-2018-q2-6) 7.3.1 20180622 (release) [ARM/embedded-7-branch revision 261907] binutils: (2.31.1-11+rpi1+11) 2.31.1
Last MCU build config: BUS_PINS_i2c1=PB6,PB7 RECEIVE_WINDOW=192 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_i2c1a=PB8,PB9 RESERVE_PINS_CAN=PB8,PB9 CANBUS_FREQUENCY=250000 STEPPER_BOTH_EDGE=1 ADC_MAX=4095 BUS_PINS_spi3=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi1=PA6,PA7,PA5 PWM_MAX=255 MCU=stm32f103xe STATS_SUMSQ_BASE=256 BUS_PINS_spi1a=PB4,PB5,PB3 CLOCK_FREQ=72000000
Build file /home/pi/klipper/klippy/../out/klipper.elf(292992): Sat Oct 15 21:25:28 2022
mcu 'tool': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 317, in get_response
    cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
error: mcu 'tool': Serial connection closed
Attempting MCU 'mcu' reset command
Got EOF when reading from device
Unable to issue reset command on MCU 'tool'
webhooks client 3019290424: Disconnected
Restarting printer
Start printer at Sun Oct 16 03:31:16 2022 (1665887476.8 9896.1)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 27, in load_config_prefix
    return PrinterBoardAliases(config)
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 11, in __init__
    pin_resolvers = [ppins.get_pin_resolver(n) for n in mcu_names]
  File "/home/pi/klipper/klippy/pins.py", line 124, in get_pin_resolver
    raise error("Unknown chip name '%s'" % (chip_name,))
error: Unknown chip name 'tool'
webhooks client 3041623976: New connection
webhooks client 3041623976: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 03:37:26 2022 (1665887847.0 25.7)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 27, in load_config_prefix
    return PrinterBoardAliases(config)
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 11, in __init__
    pin_resolvers = [ppins.get_pin_resolver(n) for n in mcu_names]
  File "/home/pi/klipper/klippy/pins.py", line 124, in get_pin_resolver
    raise error("Unknown chip name '%s'" % (chip_name,))
error: Unknown chip name 'tool'
webhooks client 3043205288: New connection
webhooks client 3043205288: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
webhooks client 3043205288: Disconnected
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 03:54:45 2022 (1665888885.9 23.3)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 27, in load_config_prefix
    return PrinterBoardAliases(config)
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 11, in __init__
    pin_resolvers = [ppins.get_pin_resolver(n) for n in mcu_names]
  File "/home/pi/klipper/klippy/pins.py", line 124, in get_pin_resolver
    raise error("Unknown chip name '%s'" % (chip_name,))
error: Unknown chip name 'tool'
webhooks client 3043914176: New connection
webhooks client 3043914176: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
webhooks client 3043914176: Disconnected
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 03:56:54 2022 (1665889014.2 23.7)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 27, in load_config_prefix
    return PrinterBoardAliases(config)
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 11, in __init__
    pin_resolvers = [ppins.get_pin_resolver(n) for n in mcu_names]
  File "/home/pi/klipper/klippy/pins.py", line 124, in get_pin_resolver
    raise error("Unknown chip name '%s'" % (chip_name,))
error: Unknown chip name 'tool'
webhooks client 3044057296: New connection
webhooks client 3044057296: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
webhooks client 3044057296: Disconnected
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 03:58:34 2022 (1665889114.4 23.9)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 27, in load_config_prefix
    return PrinterBoardAliases(config)
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 11, in __init__
    pin_resolvers = [ppins.get_pin_resolver(n) for n in mcu_names]
  File "/home/pi/klipper/klippy/pins.py", line 124, in get_pin_resolver
    raise error("Unknown chip name '%s'" % (chip_name,))
error: Unknown chip name 'tool'
webhooks client 3043446832: New connection
webhooks client 3043446832: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
webhooks client 3043446832: Disconnected
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 03:59:56 2022 (1665889196.4 23.9)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 27, in load_config_prefix
    return PrinterBoardAliases(config)
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 11, in __init__
    pin_resolvers = [ppins.get_pin_resolver(n) for n in mcu_names]
  File "/home/pi/klipper/klippy/pins.py", line 124, in get_pin_resolver
    raise error("Unknown chip name '%s'" % (chip_name,))
error: Unknown chip name 'tool'
webhooks client 3043499904: New connection
webhooks client 3043499904: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
webhooks client 3043499904: Disconnected
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 04:01:01 2022 (1665889261.6 23.1)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 27, in load_config_prefix
    return PrinterBoardAliases(config)
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 11, in __init__
    pin_resolvers = [ppins.get_pin_resolver(n) for n in mcu_names]
  File "/home/pi/klipper/klippy/pins.py", line 124, in get_pin_resolver
    raise error("Unknown chip name '%s'" % (chip_name,))
error: Unknown chip name 'tool'
webhooks client 3043979312: New connection
webhooks client 3043979312: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/klipper_config/printer.cfg', '-l', '/home/pi/klipper_logs/klippy.log', '-a', '/tmp/klippy_uds']
Git version: 'v0.10.0-608-g638303b3'
CPU: 4 core ARMv7 Processor rev 3 (v7l)
Python: '2.7.16 (default, Oct 10 2019, 22:02:15) \n[GCC 8.3.0]'
Start printer at Sun Oct 16 04:02:17 2022 (1665889337.4 23.2)
===== Config file =====
[output_pin caselight]
pin = PB11
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[virtual_sdcard]
path = /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{2} F2100
	G1 Z{10}
	G90
	G1 X{230} Y{230} F6000
	G91

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT
	G91
	G1 Z10 F8000
	G90
	G1 X0 Y222 E-3 F8000
	DISABLE_MOTORS
	M106 S0 ; turn off fan
	M117 Print Canceled

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[board_pins huvud]
mcu = tool
aliases = 
aliases_step = 
	EXT_EN=PB5,EXT_STEP=PB3,EXT_DIR=PB4,EXT_UART_TX=PA9,EXT_UART_RX=PA10,EXT_DIAG=PA15
aliases_limitsw = 
	LIMIT_1=PB10,LIMIT_2=PB11,KLICKY=PB12
aliases_bltouch = 
	PROBE_1=PC15,PROBE_2=PB1
aliases_fans = 
	FAN_PRINT_PIN=PA8,FAN_HOTEND_PIN=PA7
aliases_thermistors = 
	TEMP_PIN=PA0,TH1=PA1
aliases_heaters = 
	HEATER_PIN=PA6
aliases_rgb = 
	LED=PC13
aliases_adxl = 
	ADXL=PB1
aliases_aux = 
	AUX0=PA13,AUX1=PA14

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1A0043000550534E4E313120-if00

[idle_timeout]
timeout = 900

[gcode_macro _User_Variables]
variable_verbose = True
variable_travel_speed = 300
variable_move_accel = 1000
variable_dock_speed = 200
variable_release_speed = 200
variable_z_drop_speed = 100
variable_safe_z = 15
variable_enable_z_hop = True
variable_max_bed_y = 300
variable_max_bed_x = 300
variable_z_endstop_x = 173
variable_z_endstop_y = 300
variable_docklocation_x = 55
variable_docklocation_y = 296
variable_docklocation_z = -128
variable_dockmove_x = 50
variable_dockmove_y = 2
variable_dockmove_z = 0
variable_attachmove_x = 0
variable_attachmove_y = 30
variable_attachmove_z = 0
variable_umbilical = False
variable_umbilical_x = 15
variable_umbilical_y = 15
variable_park_toolhead = False
variable_parkposition_x = 125
variable_parkposition_y = 125
variable_parkposition_z = 30
variable_version = 1
variable_attachmove2_x = 0
variable_attachmove2_y = 0
variable_attachmove2_z = 0
gcode = 
	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

[respond]
default_type = echo

[gcode_macro _Probe_Variables]
variable_probe_attached = False
variable_probe_state = False
variable_probe_lock = False
variable_z_endstop_x = 0
variable_z_endstop_y = 0
gcode = 

[gcode_macro _klicky_check_variables_version]
gcode = 
	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
	{% if version != 1 %}
	{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

[gcode_macro _exit_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}
	{% set speed = params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed) %}
	M400
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode = 
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
	M400
	SAVE_GCODE_STATE NAME={function}
	SET_GCODE_OFFSET Z=0
	G90
	SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode = 
	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

[gcode_macro Attach_Probe_Lock]
description = Attaches Klicky Probe, can only be docked after unlocking
gcode = 
	Attach_Probe
	_Probe_Lock

[gcode_macro Dock_Probe_Unlock]
description = Docks Klicky Probe even if it was locked
gcode = 
	_Probe_Unlock
	Dock_Probe

[gcode_macro _Probe_Unlock]
description = Unlocks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description = Locks Klicky Probe state
gcode = 
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro Attach_Probe]
description = Attaches Klicky Probe
gcode = 
	{% set goback  = params.BACK|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
	{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
	{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_entry_point function=Attach_Probe
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% elif not probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Attaching Probe") }
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("moving to a safe Z distance") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	_entry_point function=Attach_Probe_intern
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{travel_feedrate}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	_CheckProbe action=attach
	_exit_point function=Attach_Probe_intern move={goback}
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked!") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already attached!") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Attach_Probe

[gcode_macro _DeployDock]
description = Deploys the dock
gcode = 

[gcode_macro _RetractDock]
description = Retracts the dock
gcode = 

[gcode_macro Dock_Probe]
description = Docks Klicky Probe
gcode = 
	{% set goback  = params.back|default(0) %}
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
	{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
	{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=Dock_Probe
	{% if probe_attached and not probe_lock %}
	{% if verbose %}
	{ action_respond_info("Docking Probe") }
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Umbilical_Path
	{% if printer["gcode_macro _DeployDock"] is defined %}
	_DeployDock
	{% endif %}
	G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
	{% endif %}
	G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z} F{dock_feedrate}
	{% endif %}
	{% if docklocation_z != -128 %}
	G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
	{% endif %}
	G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}
	G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}
	{% if printer["gcode_macro _RetractDock"] is defined %}
	_RetractDock
	{% endif %}
	{% if printer.toolhead.position.z < safe_z %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_Park_Toolhead
	G4 P1000
	_CheckProbe action=dock
	{% elif probe_lock %}
	{% if verbose %}
	{ action_respond_info("Probe locked") }
	{% endif %}
	_CheckProbe action=query
	{% else %}
	{% if verbose %}
	{ action_respond_info("Probe already docked") }
	{% endif %}
	_CheckProbe action=query
	{% endif %}
	_exit_point function=Dock_Probe move={goback}

[gcode_macro PROBE_CALIBRATE]
rename_existing = _PROBE_CALIBRATE
description = Calibrate the probes z_offset with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	G90
	Attach_Probe back=1
	_PROBE_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	M118 moving the toolhead 20 mm from the bed
	TESTZ Z=20
	M118 remove manually the probe and continue calibration

[gcode_macro PROBE_ACCURACY]
rename_existing = _PROBE_ACCURACY
description = Probe Z-height accuracy at current XY position with klicky automount
gcode = 
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% if not 'xyz' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}
	_entry_point function=PROBE_ACCURACY
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
	or printer['gcode_move'].position.y < probe_offset_y
	or printer['gcode_move'].position.x > (max_x - probe_offset_x)
	or printer['gcode_move'].position.x < probe_offset_x %}
	{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif%}
	_CheckProbe action=query
	Attach_Probe back=1
	_PROBE_ACCURACY {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe back=1
	_exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move = True

[homing_override]
axes = xyz
gcode = 
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	_klicky_check_variables_version
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
	{ action_raise_error("No attachmove location!") }
	{% endif %}
	_CheckProbe action=query
	{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}
	{% if 'PROBE_LOCK' in params%}
	{% if verbose %}
	{ action_respond_info("PROBE_LOCK = True") }
	{% endif %}
	{% set leave_probe_attached = True %}
	{% endif %}
	{% if not 'X' in params
	and not 'Y' in params
	and not 'Z' in params %}
	{% set home_x, home_y, home_z = True, True, True %}
	{% else %}
	{% if 'X' in params %}
	{% set home_x = True %}
	{% endif %}
	{% if 'Y' in params %}
	{% set home_y = True %}
	{% endif %}
	{% if 'Z' in params %}
	{% set home_z = True %}
	{% endif %}
	{% if 'X' in params
	and 'Y' in params
	and 'Z' in params %}
	_Homing_Variables reset=1
	{% endif %}
	{% endif %}
	_entry_point function=homing_override
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% if not enable_z_hop %}
	{% set safe_z = 0 %}
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if 'z' in printer.toolhead.homed_axes %}
	{% if printer.toolhead.position.z < safe_z %}
	{% if verbose %}
	{ action_respond_info("Z too low, performing ZHOP") }
	{% endif %}
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	{% else %}
	{% if verbose %}
	{ action_respond_info("Z not homed, forcing full G28") }
	{% endif %}
	SET_KINEMATIC_POSITION X=0 Y=0 Z=0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% set home_x, home_y, home_z = True, True, True %}
	{% endif %}
	{% endif %}
	{% if attachmove_y == 0 %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	G28 Y0
	{% endif %}
	{% set home_y = False %}
	{% endif %}
	{% if home_x %}
	{% if verbose %}
	{ action_respond_info("Homing X") }
	{% endif %}
	{% if printer["gcode_macro _HOME_X"] is defined %}
	_HOME_X
	{% else %}
	G28 X0
	{% endif %}
	{% endif %}
	{% if home_y %}
	{% if verbose %}
	{ action_respond_info("Homing Y") }
	{% endif %}
	{% if printer["gcode_macro _HOME_Y"] is defined %}
	_HOME_Y
	{% else %}
	G28 Y0
	{% endif %}
	{% endif %}
	{% if home_z %}
	{% if verbose %}
	{ action_respond_info("Homing Z") }
	{% endif %}
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Attach_Probe
	{% if leave_probe_attached %}
	_Probe_Lock
	{% endif %}
	{% else %}
	Dock_Probe
	{% endif %}
	_Home_Z
	{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
	Dock_Probe
	{% endif %}
	{% endif %}
	_CheckProbe action=query
	_Park_Toolhead
	_exit_point function=homing_override

[gcode_macro _Umbilical_Path]
gcode = 
	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% if umbilical %}
	_entry_point function=Umbilical_Path
	G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
	_exit_point function=Umbilical_Path
	{% endif %}

[gcode_macro _Home_Z]
gcode = 
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Home_Z
	{% if not 'xy' in printer.toolhead.homed_axes %}
	{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
	{% if not 'z' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Resetting Z position to zero") }
	{% endif %}
	SET_KINEMATIC_POSITION Z=0
	{% endif %}
	G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
	G28 Z0
	G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}
	_exit_point function=Home_Z

[gcode_macro _CheckProbe]
variable_probe_state = 0
gcode = 
	Query_Probe
	_SetProbeState action={ params.ACTION }

[gcode_macro _SetProbeState]
gcode = 
	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}
	{% if query_probe_triggered %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}
	{% if action == 'query' %}
	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}
	{% if not query_probe_triggered and action == 'dock' %}
	{ action_raise_error("Probe dock failed!") }
	{% endif %}
	{% if query_probe_triggered and action == 'attach' %}
	{ action_raise_error("Probe attach failed!") }
	{% endif %}

[gcode_macro _Park_Toolhead]
gcode = 
	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	_entry_point function=Park_Toolhead
	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
	{% if verbose %}
	{ action_respond_info("Parking Toolhead") }
	{% endif %}
	G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
	{% endif %}
	_exit_point function=Park_Toolhead

[gcode_macro START_PRINT]
gcode = 
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)  %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
	CLEAR_PAUSE
	RESET_VELOCITY
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	M220 S100
	M221 S100
	G21
	G90
	M82
	EUCLID_PROBE_BEGIN_BATCH
	G28
	M117 Heating bed...
	M190 S{ bed_temp }
	M117 Adjusting for tilt...
	Z_TILT_ADJUST
	G28 Z
	BED_MESH_CALIBRATE
	EUCLID_PROBE_END_BATCH
	M109 S{ extruder_temp }
	M117 Printing...
	M83
	G92 E0

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_ORIG
variable_buffer = 20
gcode = 
	{% set start_print  = printer["gcode_macro START_PRINT"] %}
	{% set bed_mesh     = printer.configfile.settings.bed_mesh %}
	{% set probe_config = printer.configfile.settings.probe %}
	{% if start_print.first_layer_min_xy and start_print.first_layer_max_xy %}
	{ action_respond_info("print_min: {}".format(start_print.first_layer_min_xy)) }
	{ action_respond_info("print_max: {}".format(start_print.first_layer_max_xy)) }
	{% set print_min_x = (start_print.first_layer_min_xy[0] | float) + probe_config.x_offset %}
	{% set print_min_y = (start_print.first_layer_min_xy[1] | float) + probe_config.y_offset %}
	{% set print_max_x = (start_print.first_layer_max_xy[0] | float) + probe_config.x_offset %}
	{% set print_max_y = (start_print.first_layer_max_xy[1] | float) + probe_config.y_offset %}
	Attach_Probe
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	{% set minimum_probe_count = 5 if bed_mesh.algorithm == "bicubic" else 3 %}
	{% set probe_count = bed_mesh.probe_count %}
	{% set probe_count_x = probe_count[0] %}
	{% set probe_count_y = probe_count[1] if (probe_count | length) == 2 else probe_count_x %}
	{% set relative_reference_index = bed_mesh.relative_reference_index | default(-1, true) %}
	{% set mesh_min_x, mesh_min_y = bed_mesh.mesh_min %}
	{% set mesh_max_x, mesh_max_y = bed_mesh.mesh_max %}
	{% if (print_max_x - print_min_x) < (mesh_max_x - mesh_min_x)/2 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	{% if (print_max_y - print_min_y) < (mesh_max_y - mesh_min_y)/2 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	{% if relative_reference_index > 0 %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{% endif %}
	{% set mesh_min_x = [print_min_x - buffer, mesh_min_x] | max %}
	{% set mesh_min_y = [print_min_y - buffer, mesh_min_y] | max %}
	{% set mesh_max_x = [print_max_x + buffer, mesh_max_x] | min %}
	{% set mesh_max_y = [print_max_y + buffer, mesh_max_y] | min %}
	{ action_respond_info("mesh_min: ({}, {})".format(mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: ({}, {})".format(mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: ({}, {})".format(probe_count_x,probe_count_y)) }
	{ action_respond_info("relative_reference_index: {}".format(relative_reference_index)) }
	BED_MESH_CALIBRATE_ORIG mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% else %}
	BED_MESH_CALIBRATE_ORIG
	{% endif %}
	Dock_Probe
	{% else %}
	Attach_Probe
	BED_MESH_CALIBRATE_ORIG
	Dock_Probe
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing = _Z_TILT_ADJUST
gcode = 
	{% set V = printer["gcode_macro _User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Z Tilt Adjust") }
	{% endif %}
	_CheckProbe action=query
	G90
	Attach_Probe
	_Z_TILT_ADJUST {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe
	G28 Z0
description = 

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom'] %}
	{% set dic = {'center'     : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left' : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right': {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'  : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right' : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'     : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': park.coord.x, 'y': park.coord.y,
	'z': [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83     ; insure relative extrusion
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}            ; execute the klipper PAUSE command
	SET_GCODE_OFFSET X=0 Y=0 ; this will insure that the head parks always at the same position in a multi setup
	G90                      ; insure absolute move
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 X{pos.x} Y{pos.y} Z{pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel} ; execute the klipper RESUME command
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing} ; execute the klipper PAUSE command
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing} ; execute the klipper RESUME command
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = False
run_current = 1

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = -20
position_endstop = 300
position_max = 300
homing_speed = 75
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = False
run_current = 1

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 4
microsteps = 32
endstop_pin = PG15
position_max = 250
position_min = -20
homing_speed = 8.0
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = -1.362

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 4
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = False
run_current = 0.7
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = tool: EXT_STEP
dir_pin = !tool: EXT_DIR
enable_pin = !tool: EXT_EN
rotation_distance = 22.67
gear_ratio = 50:10
microsteps = 32
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = tool: HEATER_PIN
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = tool:TEMP_PIN
min_temp = -150
max_temp = 270
max_power = 1.0
min_extrude_temp = 0
control = pid
pid_kp = 24.788
pid_ki = 2.119
pid_kd = 72.505

[tmc2209 extruder]
uart_pin = tool: EXT_UART_TX
interpolate = false
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[fan_generic nevermore]
pin = PA8
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan_generic hepa]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[fan]
pin = tool: FAN_PRINT_PIN
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = tool: FAN_HOTEND_PIN
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[probe]
pin = ^tool:KLICKY
x_offset = 0
y_offset = 25
speed = 10
samples = 3
samples_result = median
samples_tolerance = 0.04
samples_tolerance_retries = 3
z_offset = 6.175

[z_tilt]
z_positions = 
	-50, 18
	148, 348
	350, 18
points = 
	30, 5
	160, 245
	270, 5
speed = 250
horizontal_move_z = 15
retries = 10
retry_tolerance = 0.007

[bed_mesh]
speed = 150
horizontal_move_z = 10.5
mesh_min = 35,26
mesh_max = 270, 258
probe_count = 7,7
move_check_distance = 5
algorithm = bicubic
bicubic_tension = 0.2
relative_reference_index = 31

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.6
min_temp = -150
max_temp = 120
control = pid
pid_kp = 39.959
pid_ki = 1.675
pid_kd = 238.256

[exclude_object]

[gcode_macro M486]
gcode = 
	{% if 'exclude_object' not in printer %}
	{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}
	{% if 'T' in params %}
	EXCLUDE_OBJECT RESET=1
	{% for i in range(params.T | int) %}
	EXCLUDE_OBJECT_DEFINE NAME={i}
	{% endfor %}
	{% endif %}
	{% if 'C' in params %}
	EXCLUDE_OBJECT CURRENT=1
	{% endif %}
	{% if 'P' in params %}
	EXCLUDE_OBJECT NAME={params.P}
	{% endif %}
	{% if 'S' in params %}
	{% if params.S == '-1' %}
	{% if printer.exclude_object.current_object %}
	EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
	{% endif %}
	{% else %}
	EXCLUDE_OBJECT_START NAME={params.S}
	{% endif %}
	{% endif %}
	{% if 'U' in params %}
	EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}

[gcode_macro PID_TUNE]
gcode = 
	G28
	G1 Z10 F7800
	M106 S64
	PID_CALIBRATE HEATER=extruder TARGET=245
	SAVE_CONFIG

[gcode_macro M600]
description = Executes a color change by pausing the printer an unloading the filament.
gcode = 
	PAUSE
	UNLOAD_FILAMENT
	M117 Please load new filament and resume
	RESPOND MSG="Please load new filament and resume"

[skew_correction]

[gcode_macro PRINT_START]
variable_parameter_area_start = 0,0
variable_parameter_area_end = 0,0
gcode = 
	{% set BED = params.BED|default(55)|int %}
	{% set EXTRUDER = params.EXTRUDER|default(205)|int %}
	G28 X Y
	M104 S170
	M140 S{BED}
	RESPOND PREFIX= MSG="Waiting for temperatures..."
	M117  Waiting for temperatures...
	M190 S{BED}
	RESPOND PREFIX= MSG="Waiting for thermal expansion..."
	M117 Waiting for thermal expansion...
	G4 P30000
	RESPOND PREFIX= MSG="Creating a mesh..."
	M117 Creating a mesh...
	G28
	_Probe_Unlock
	ATTACH_PROBE_LOCK
	Z_TILT_ADJUST
	BED_MESH_CALIBRATE
	DOCK_PROBE_UNLOCK
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Moving to prime position"
	M117 Moving to prime position
	G1 X25 Y-5 Z10 F5000.0
	{% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
	M109 S{params.EXTRUDER|float*0.98}
	{% endif %}
	M104 S{EXTRUDER}
	RESPOND PREFIX= MSG="Priming the nozzle"
	M117 Priming the nozzle
	G92 E0
	G0 Z0.15
	G0 X55 Y-4 Z0.28 F1500.0
	G92 E0 ;Reset Extruder
	G1 X195 Y-4 Z0.28 F1500.0 E15 ;Draw the first line
	G92 E0 ;Reset Extruder
	G10
	G1 Z2.0 F3000 ;Move Z Axis up
	RESPOND PREFIX= MSG="Printing..."
	M117 Printing...
	M117
	SET_FAN_SPEED FAN=nevermore SPEED=1
	SET_FAN_SPEED FAN=hepa SPEED=1

[gcode_macro PRINT_END]
gcode = 
	G91
	G1 E-2
	G90
	TURN_OFF_HEATERS
	G28 X Y

[gcode_macro TEST_SPEED]
gcode = 
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	{% set bound = params.BOUND|default(20)|int %}
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	SAVE_GCODE_STATE NAME=TEST_SPEED
	G90
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	G28
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	Z_TILT
	G28 Z
	{% endif %}
	{% endif %}
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}
	{% for i in range(iterations) %}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_min} F{speed * 60}
	G0 X{x_min} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_max} F{speed * 60}
	G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000
	GET_POSITION
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 20000
max_accel_to_decel = 20000
max_z_velocity = 10
max_z_accel = 500
square_corner_velocity = 8.0

[input_shaper]
shaper_type_x = zv
shaper_freq_x = 66.8
shaper_type_y = 2hump_ei
shaper_freq_y = 42.6

[bed_mesh default]
version = 1
points = 
	-0.076250, -0.031250, -0.020625, -0.034375, -0.026875, -0.066875, -0.072500
	0.032500, -0.000625, -0.002500, -0.034375, -0.045000, -0.070000, -0.108750
	0.086875, 0.080625, -0.003750, -0.006875, -0.068125, -0.123125, -0.168750
	0.131250, 0.098125, 0.088750, -0.027500, -0.070000, -0.105625, -0.182500
	0.185625, 0.145000, 0.091875, 0.000000, -0.066875, -0.142500, -0.215625
	0.268125, 0.245625, 0.111875, 0.034375, -0.073750, -0.143125, -0.248125
	0.310625, 0.243750, 0.163125, 0.013750, -0.034375, -0.163125, -0.343125
tension = 0.2
min_x = 35.0
algo = bicubic
y_count = 7
mesh_y_pps = 2
min_y = 26.0
x_count = 7
max_y = 257.96
mesh_x_pps = 2
max_x = 269.96

[skew_correction my_skew_profile]
xy_skew = 0.00110302178413
xz_skew = 0.0
yz_skew = 0.0
=======================
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 175, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 141, in _read_config
    self.load_object(config, section_config.get_name(), None)
  File "/home/pi/klipper/klippy/klippy.py", line 130, in load_object
    self.objects[section] = init_func(config.getsection(section))
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 27, in load_config_prefix
    return PrinterBoardAliases(config)
  File "/home/pi/klipper/klippy/extras/board_pins.py", line 11, in __init__
    pin_resolvers = [ppins.get_pin_resolver(n) for n in mcu_names]
  File "/home/pi/klipper/klippy/pins.py", line 124, in get_pin_resolver
    raise error("Unknown chip name '%s'" % (chip_name,))
error: Unknown chip name 'tool'
webhooks client 3043545216: New connection
webhooks client 3043545216: Client info {'program': 'Moonraker', 'version': 'v0.7.1-666-g60b871a'}
