2024-04-13 20:00:02,439 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-13 20:00:02,439 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-13 20:00:02,439 [functions.py:log_start()] - Python version: 3.9
2024-04-13 20:00:02,574 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-13 20:00:02,575 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-04-13 20:00:02,582 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-13 20:00:02,648 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-13 20:00:02,648 [config.py:install_language()] - Using lang en
2024-04-13 20:00:02,660 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-13 20:00:02,661 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-13 20:00:02,663 [screen.py:__init__()] - Screen resolution: 1024x768
2024-04-13 20:00:02,664 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-04-13 20:00:03,081 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-13 20:00:03,090 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-13 20:00:03,098 [screen.py:initial_connection()] - Default printer: None
2024-04-13 20:00:03,130 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 20:00:03,131 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-13 20:00:03,179 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 20:00:03,186 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:00:03,186 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:00:03,204 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 20:00:03,214 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 20:00:03,223 [_logging.py:info()] - Websocket connected
2024-04-13 20:00:03,224 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 20:00:03,226 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:00:03,236 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 20:00:03,247 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 20:00:03,247 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 20:00:03,247 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 20:00:03,263 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 20:00:03,457 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 20:00:03,460 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 20:00:03,460 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 20:00:03,460 [printer.py:reinit()] - # Extruders: 1
2024-04-13 20:00:03,460 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 20:00:03,461 [printer.py:reinit()] - # Fans: 3
2024-04-13 20:00:03,461 [printer.py:reinit()] - # Output pins: 0
2024-04-13 20:00:03,461 [printer.py:reinit()] - # Leds: 0
2024-04-13 20:00:03,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 20:00:03,474 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 20:00:03,476 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 20:00:03,745 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 20:00:03,745 [screen.py:init_klipper()] - Printer initialized
2024-04-13 20:00:03,746 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 20:00:03,746 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 20:00:03,841 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 20:00:03,844 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-13 20:00:03,934 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 20:00:03,941 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 20:00:03,947 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 20:00:03,953 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 20:00:03,958 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 20:00:03,963 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 20:00:03,993 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 20:00:03,994 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 20:00:04,020 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 20:00:04,021 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 20:00:04,032 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 20:04:55,736 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-13 20:04:55,736 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-13 20:04:55,736 [functions.py:log_start()] - Python version: 3.9
2024-04-13 20:04:55,886 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-13 20:04:55,888 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-04-13 20:04:55,900 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-13 20:04:55,984 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-13 20:04:55,984 [config.py:install_language()] - Using lang en
2024-04-13 20:04:55,999 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-13 20:04:56,000 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-13 20:04:56,002 [screen.py:__init__()] - Screen resolution: 1024x768
2024-04-13 20:04:56,003 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-04-13 20:04:56,698 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-13 20:04:56,710 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-13 20:04:56,721 [screen.py:initial_connection()] - Default printer: None
2024-04-13 20:04:56,760 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 20:04:56,761 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-13 20:04:56,812 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 20:04:56,819 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:04:56,820 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:04:56,835 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 20:05:07,345 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:05:07,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:05:07,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 20:05:07,379 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 20:05:07,393 [_logging.py:info()] - Websocket connected
2024-04-13 20:05:07,394 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 20:05:07,396 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:05:07,411 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 20:05:07,425 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 20:05:07,426 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 20:05:07,426 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 20:05:07,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 20:05:07,521 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 20:05:07,524 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 20:05:07,524 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 20:05:07,524 [printer.py:reinit()] - # Extruders: 1
2024-04-13 20:05:07,524 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 20:05:07,525 [printer.py:reinit()] - # Fans: 3
2024-04-13 20:05:07,525 [printer.py:reinit()] - # Output pins: 0
2024-04-13 20:05:07,525 [printer.py:reinit()] - # Leds: 0
2024-04-13 20:05:07,525 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 20:05:07,538 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 20:05:07,539 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 20:05:07,817 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 20:05:07,817 [screen.py:init_klipper()] - Printer initialized
2024-04-13 20:05:07,818 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 20:05:07,818 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 20:05:07,819 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 20:05:07,824 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-13 20:05:07,900 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 20:05:07,906 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 20:05:07,914 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 20:05:07,920 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 20:05:07,926 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 20:05:07,931 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 20:05:07,962 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 20:05:07,964 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 20:05:07,986 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 20:05:07,988 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 20:05:07,998 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 20:07:04,068 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-04-13 20:07:04,068 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-04-13 20:07:04,070 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-04-13 20:07:04,074 [screen.py:show_panel()] - Reinitializing panel
2024-04-13 20:07:04,151 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 20:07:04,191 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 20:07:04,192 [screen.py:show_panel()] - Reinitializing panel
2024-04-13 20:07:04,231 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 20:07:04,239 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:07:04,240 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:07:04,244 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 20:07:14,887 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:07:14,887 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:07:14,908 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 20:07:14,929 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 20:07:14,943 [_logging.py:info()] - Websocket connected
2024-04-13 20:07:14,943 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 20:07:14,944 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:07:14,959 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 20:07:14,971 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 20:07:14,971 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 20:07:14,972 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 20:07:14,988 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 20:07:15,256 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 20:07:15,260 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 20:07:15,262 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 20:07:15,262 [printer.py:reinit()] - # Extruders: 1
2024-04-13 20:07:15,262 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 20:07:15,262 [printer.py:reinit()] - # Fans: 3
2024-04-13 20:07:15,262 [printer.py:reinit()] - # Output pins: 0
2024-04-13 20:07:15,263 [printer.py:reinit()] - # Leds: 0
2024-04-13 20:07:15,263 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 20:07:15,283 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 20:07:15,286 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 20:07:15,576 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 20:07:15,576 [screen.py:init_klipper()] - Printer initialized
2024-04-13 20:07:15,576 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 20:07:15,577 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 20:07:15,591 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 20:07:15,593 [screen.py:show_panel()] - Reinitializing panel
2024-04-13 20:07:15,654 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 20:07:15,660 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 20:07:15,665 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 20:07:15,671 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 20:07:15,676 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 20:07:15,682 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 20:07:15,713 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 20:07:15,714 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 20:07:15,737 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 20:07:15,740 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 20:07:15,750 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 20:07:51,346 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-13 20:07:51,346 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-13 20:07:51,346 [functions.py:log_start()] - Python version: 3.9
2024-04-13 20:07:51,497 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-13 20:07:51,499 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-04-13 20:07:51,509 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-13 20:07:51,605 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-13 20:07:51,606 [config.py:install_language()] - Using lang en
2024-04-13 20:07:51,621 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-13 20:07:51,623 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-13 20:07:51,625 [screen.py:__init__()] - Screen resolution: 1024x768
2024-04-13 20:07:51,627 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-04-13 20:07:52,331 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-13 20:07:52,340 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-13 20:07:52,348 [screen.py:initial_connection()] - Default printer: None
2024-04-13 20:07:52,379 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 20:07:52,380 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-13 20:07:52,425 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 20:07:52,432 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:07:52,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:07:52,450 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 20:08:02,353 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:08:02,353 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:08:02,374 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 20:08:02,391 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 20:08:02,408 [_logging.py:info()] - Websocket connected
2024-04-13 20:08:02,409 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 20:08:02,411 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:08:02,425 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 20:08:02,440 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 20:08:02,441 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 20:08:02,441 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 20:08:02,458 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 20:08:02,507 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 20:08:02,509 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 20:08:02,510 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 20:08:02,510 [printer.py:reinit()] - # Extruders: 1
2024-04-13 20:08:02,510 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 20:08:02,510 [printer.py:reinit()] - # Fans: 3
2024-04-13 20:08:02,510 [printer.py:reinit()] - # Output pins: 0
2024-04-13 20:08:02,510 [printer.py:reinit()] - # Leds: 0
2024-04-13 20:08:02,510 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 20:08:02,522 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 20:08:02,524 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 20:08:02,798 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 20:08:02,799 [screen.py:init_klipper()] - Printer initialized
2024-04-13 20:08:02,799 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 20:08:02,799 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 20:08:02,800 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 20:08:02,802 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-13 20:08:02,878 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 20:08:02,885 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 20:08:02,892 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 20:08:02,898 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 20:08:02,903 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 20:08:02,908 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 20:08:02,939 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 20:08:02,940 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 20:08:02,963 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 20:08:02,964 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 20:08:02,974 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 20:20:17,689 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-13 20:20:17,689 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-13 20:20:17,690 [functions.py:log_start()] - Python version: 3.9
2024-04-13 20:20:17,845 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-13 20:20:17,846 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-04-13 20:20:17,860 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-13 20:20:17,947 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-13 20:20:17,947 [config.py:install_language()] - Using lang en
2024-04-13 20:20:17,962 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-13 20:20:17,963 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-13 20:20:17,964 [screen.py:__init__()] - Screen resolution: 1024x768
2024-04-13 20:20:17,965 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-04-13 20:20:18,657 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-13 20:20:18,669 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-13 20:20:18,679 [screen.py:initial_connection()] - Default printer: None
2024-04-13 20:20:18,717 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 20:20:18,718 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-13 20:20:18,780 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 20:20:18,790 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:20:18,790 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:20:18,809 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 20:20:29,387 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:20:29,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:20:29,409 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 20:20:29,426 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 20:20:29,446 [_logging.py:info()] - Websocket connected
2024-04-13 20:20:29,447 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 20:20:29,449 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:20:29,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 20:20:29,494 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 20:20:29,494 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 20:20:29,494 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 20:20:29,522 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 20:20:29,699 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 20:20:29,701 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 20:20:29,702 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 20:20:29,702 [printer.py:reinit()] - # Extruders: 1
2024-04-13 20:20:29,702 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 20:20:29,702 [printer.py:reinit()] - # Fans: 3
2024-04-13 20:20:29,703 [printer.py:reinit()] - # Output pins: 0
2024-04-13 20:20:29,703 [printer.py:reinit()] - # Leds: 0
2024-04-13 20:20:29,703 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 20:20:29,719 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 20:20:29,721 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 20:20:29,987 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 20:20:29,987 [screen.py:init_klipper()] - Printer initialized
2024-04-13 20:20:29,987 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 20:20:29,987 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 20:20:29,998 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 20:20:30,001 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-13 20:20:30,100 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 20:20:30,107 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 20:20:30,117 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 20:20:30,126 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 20:20:30,133 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 20:20:30,140 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 20:20:30,179 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 20:20:30,181 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 20:20:30,209 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 20:20:30,211 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 20:20:30,225 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 20:30:31,890 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-13 20:30:31,891 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-13 20:30:31,891 [functions.py:log_start()] - Python version: 3.9
2024-04-13 20:30:32,042 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-13 20:30:32,044 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-04-13 20:30:32,054 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-13 20:30:32,153 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-13 20:30:32,154 [config.py:install_language()] - Using lang en
2024-04-13 20:30:32,169 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-13 20:30:32,171 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-13 20:30:32,173 [screen.py:__init__()] - Screen resolution: 1024x768
2024-04-13 20:30:32,175 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-04-13 20:30:32,873 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-13 20:30:32,882 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-13 20:30:32,889 [screen.py:initial_connection()] - Default printer: None
2024-04-13 20:30:32,921 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 20:30:32,922 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-13 20:30:32,968 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 20:30:32,976 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:30:32,976 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:30:32,990 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 20:30:43,341 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 20:30:43,341 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:30:43,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 20:30:43,381 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 20:30:43,404 [_logging.py:info()] - Websocket connected
2024-04-13 20:30:43,405 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 20:30:43,407 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 20:30:43,424 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 20:30:43,441 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 20:30:43,441 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 20:30:43,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 20:30:43,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 20:30:43,720 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 20:30:43,726 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 20:30:43,728 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 20:30:43,728 [printer.py:reinit()] - # Extruders: 1
2024-04-13 20:30:43,728 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 20:30:43,729 [printer.py:reinit()] - # Fans: 3
2024-04-13 20:30:43,729 [printer.py:reinit()] - # Output pins: 0
2024-04-13 20:30:43,729 [printer.py:reinit()] - # Leds: 0
2024-04-13 20:30:43,729 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 20:30:43,758 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 20:30:43,759 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 20:30:44,003 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 20:30:44,003 [screen.py:init_klipper()] - Printer initialized
2024-04-13 20:30:44,004 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 20:30:44,004 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 20:30:44,016 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 20:30:44,031 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-13 20:30:44,137 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 20:30:44,143 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 20:30:44,151 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 20:30:44,157 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 20:30:44,162 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 20:30:44,167 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 20:30:44,198 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 20:30:44,201 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 20:30:44,223 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 20:30:44,225 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 20:30:44,236 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 21:01:02,738 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-13 21:01:02,738 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-13 21:01:02,738 [functions.py:log_start()] - Python version: 3.9
2024-04-13 21:01:02,887 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-13 21:01:02,889 [config.py:__init__()] - Config path location: /home/pi/KlipperScreen/ks_includes/defaults.conf
2024-04-13 21:01:02,898 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-13 21:01:02,995 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-13 21:01:02,996 [config.py:install_language()] - Using lang en
2024-04-13 21:01:03,011 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-13 21:01:03,012 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-13 21:01:03,014 [screen.py:__init__()] - Screen resolution: 640x480
2024-04-13 21:01:03,015 [KlippyGtk.py:__init__()] - Font size: 14.9 (medium)
2024-04-13 21:01:03,651 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-13 21:01:03,660 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-13 21:01:03,668 [screen.py:initial_connection()] - Default printer: None
2024-04-13 21:01:03,699 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 21:01:03,700 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-13 21:01:03,743 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 21:01:03,750 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 21:01:03,751 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 21:01:03,766 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 21:01:14,331 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 21:01:14,331 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 21:01:14,343 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 21:01:14,352 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 21:01:14,361 [_logging.py:info()] - Websocket connected
2024-04-13 21:01:14,361 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 21:01:14,362 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 21:01:14,371 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 21:01:14,379 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 21:01:14,380 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 21:01:14,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 21:01:14,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 21:01:14,455 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 21:01:14,457 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 21:01:14,458 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 21:01:14,458 [printer.py:reinit()] - # Extruders: 1
2024-04-13 21:01:14,458 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 21:01:14,458 [printer.py:reinit()] - # Fans: 3
2024-04-13 21:01:14,458 [printer.py:reinit()] - # Output pins: 0
2024-04-13 21:01:14,459 [printer.py:reinit()] - # Leds: 0
2024-04-13 21:01:14,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 21:01:14,473 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 21:01:14,474 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 21:01:14,744 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 21:01:14,744 [screen.py:init_klipper()] - Printer initialized
2024-04-13 21:01:14,745 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 21:01:14,745 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 21:01:14,745 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 21:01:14,748 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-13 21:01:14,833 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 21:01:14,840 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 21:01:14,848 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 21:01:14,854 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 21:01:14,859 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 21:01:14,863 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 21:01:14,894 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 21:01:14,895 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 21:01:14,918 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 21:01:14,919 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 21:01:14,930 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 21:08:35,762 [main_menu.py:toggle_visibility()] - Graph show False: extruder
2024-04-13 21:08:35,766 [config.py:save_user_config_options()] - Creating a new config file in /home/pi/printer_data/config/KlipperScreen.conf
2024-04-13 21:08:37,004 [main_menu.py:toggle_visibility()] - Graph show False: heater_bed
2024-04-13 21:08:37,006 [config.py:save_user_config_options()] - Creating a new config file in /home/pi/printer_data/config/KlipperScreen.conf
2024-04-13 21:11:17,837 [screen.py:_load_panel()] - Loading panel: print
2024-04-13 21:11:17,885 [print.py:__init__()] - Thumbsize: 102.69767441860465
2024-04-13 21:11:17,888 [print.py:__init__()] - thumbs
2024-04-13 21:11:17,894 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-13 21:11:17,913 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-13 21:11:17,920 [print.py:load_files()] - Loaded in 0.002 seconds
2024-04-13 21:13:42,803 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-13 21:13:42,804 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-13 21:13:42,804 [functions.py:log_start()] - Python version: 3.9
2024-04-13 21:13:42,955 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-13 21:13:42,966 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-13 21:13:42,986 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-13 21:13:42,988 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
extruder = False
heater_bed = False

=======================
2024-04-13 21:13:42,988 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-13 21:13:43,098 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-13 21:13:43,098 [config.py:install_language()] - Using lang en
2024-04-13 21:13:43,114 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-13 21:13:43,115 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-13 21:13:43,117 [screen.py:__init__()] - Screen resolution: 640x480
2024-04-13 21:13:43,118 [KlippyGtk.py:__init__()] - Font size: 14.9 (medium)
2024-04-13 21:13:43,783 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-13 21:13:43,791 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-13 21:13:43,799 [screen.py:initial_connection()] - Default printer: None
2024-04-13 21:13:43,831 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 21:13:43,831 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-13 21:13:43,880 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 21:13:43,887 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 21:13:43,887 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 21:13:43,902 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 21:13:53,950 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 21:13:53,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 21:13:53,959 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 21:14:03,950 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 21:14:03,951 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 21:14:03,962 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 21:14:13,952 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 21:14:13,952 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 21:14:13,977 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 21:14:13,996 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 21:14:14,015 [_logging.py:info()] - Websocket connected
2024-04-13 21:14:14,016 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 21:14:14,017 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 21:14:14,035 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 21:14:14,044 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 21:14:14,044 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 21:14:14,045 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 21:14:14,055 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 21:14:14,142 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 21:14:14,144 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 21:14:14,145 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 21:14:14,145 [printer.py:reinit()] - # Extruders: 1
2024-04-13 21:14:14,145 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 21:14:14,145 [printer.py:reinit()] - # Fans: 3
2024-04-13 21:14:14,145 [printer.py:reinit()] - # Output pins: 0
2024-04-13 21:14:14,145 [printer.py:reinit()] - # Leds: 0
2024-04-13 21:14:14,145 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 21:14:14,158 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 21:14:14,160 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 21:14:14,434 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 21:14:14,435 [screen.py:init_klipper()] - Printer initialized
2024-04-13 21:14:14,435 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 21:14:14,435 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 21:14:14,436 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 21:14:14,441 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-13 21:14:14,516 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 21:14:14,522 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 21:14:14,530 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 21:14:14,536 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 21:14:14,541 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 21:14:14,547 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 21:14:14,578 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 21:14:14,580 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 21:14:14,603 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 21:14:14,604 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 21:14:14,615 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 21:28:37,068 [KlippyGtk.py:Dialog()] - Showing dialog Temperature (width=640, height=480)
2024-04-13 21:28:37,070 [heatergraph.py:event_cb()] - Entering Fullscreen
2024-04-13 21:28:40,350 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-13 21:28:50,622 [KlippyGtk.py:Dialog()] - Showing dialog Temperature (width=640, height=480)
2024-04-13 21:28:50,623 [heatergraph.py:event_cb()] - Entering Fullscreen
2024-04-13 21:28:51,731 [heatergraph.py:event_cb()] - Graph area: 158.997314453125 311.9949951171875
2024-04-13 21:28:51,878 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-13 21:28:52,840 [KlippyGtk.py:Dialog()] - Showing dialog Temperature (width=640, height=480)
2024-04-13 21:28:52,840 [heatergraph.py:event_cb()] - Entering Fullscreen
2024-04-13 21:28:54,429 [heatergraph.py:event_cb()] - Graph area: 273.99554443359375 199.99668884277344
2024-04-13 21:28:54,621 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-13 21:29:00,901 [screen.py:_load_panel()] - Loading panel: print
2024-04-13 21:29:00,943 [print.py:__init__()] - Thumbsize: 102.69767441860465
2024-04-13 21:29:00,947 [print.py:__init__()] - thumbs
2024-04-13 21:29:00,954 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-04-13 21:29:00,981 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-04-13 21:29:00,995 [print.py:load_files()] - Loaded in 0.003 seconds
2024-04-13 21:29:03,937 [screen.py:_menu_go_back()] - #### Menu go back
2024-04-13 21:29:03,963 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 21:29:13,757 [KlippyGtk.py:Dialog()] - Showing dialog Temperature (width=640, height=480)
2024-04-13 21:29:13,758 [heatergraph.py:event_cb()] - Entering Fullscreen
2024-04-13 21:29:15,607 [heatergraph.py:event_cb()] - Graph area: 2.99969482421875 20.999420166015625
2024-04-13 21:29:15,830 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-13 21:29:36,394 [KlippyGtk.py:Dialog()] - Showing dialog Temperature (width=640, height=480)
2024-04-13 21:29:36,395 [heatergraph.py:event_cb()] - Entering Fullscreen
2024-04-13 21:29:39,168 [heatergraph.py:event_cb()] - Graph area: 348.9944152832031 445.992919921875
2024-04-13 21:29:39,818 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-13 22:17:10,826 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-13 22:17:10,826 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-13 22:17:10,827 [functions.py:log_start()] - Python version: 3.9
2024-04-13 22:17:10,977 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-13 22:17:10,978 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-13 22:17:10,991 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-13 22:17:10,993 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
extruder = False
heater_bed = False

=======================
2024-04-13 22:17:10,993 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-13 22:17:11,083 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-13 22:17:11,083 [config.py:install_language()] - Using lang en
2024-04-13 22:17:11,100 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-13 22:17:11,101 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-13 22:17:11,103 [screen.py:__init__()] - Screen resolution: 640x480
2024-04-13 22:17:11,104 [KlippyGtk.py:__init__()] - Font size: 14.9 (medium)
2024-04-13 22:17:11,764 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-13 22:17:11,773 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-13 22:17:11,780 [screen.py:initial_connection()] - Default printer: None
2024-04-13 22:17:11,812 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-13 22:17:11,813 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-13 22:17:11,858 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-13 22:17:11,865 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 22:17:11,865 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 22:17:11,880 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 22:17:21,700 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 22:17:21,700 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 22:17:21,709 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-13 22:17:31,701 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-13 22:17:31,702 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 22:17:31,725 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-13 22:17:31,741 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-13 22:17:31,758 [_logging.py:info()] - Websocket connected
2024-04-13 22:17:31,759 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-13 22:17:31,760 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-13 22:17:31,774 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-13 22:17:31,787 [printer.py:configure_cameras()] - Cameras: []
2024-04-13 22:17:31,787 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-13 22:17:31,788 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-13 22:17:31,803 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-13 22:17:31,931 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.030000, 0.002500, 0.027500, -0.007500, -0.002500\n-0.002500, -0.025000, -0.022500, 0.020000, 0.007500\n-0.002500, -0.037500, -0.012500, -0.002500, 0.022500\n-0.015000, -0.050000, -0.047500, -0.022500, -0.025000\n-0.097500, -0.075000, -0.087500, -0.047500, -0.057500', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '28.88', 'max_y': '139.99'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.03, 0.0025, 0.0275, -0.0075, -0.0025], [-0.0025, -0.025, -0.0225, 0.02, 0.0075], [-0.0025, -0.0375, -0.0125, -0.0025, 0.0225], [-0.015, -0.05, -0.0475, -0.0225, -0.025], [-0.0975, -0.075, -0.0875, -0.0475, -0.0575]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 28.88, 'max_y': 139.99, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-13 22:17:31,934 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-13 22:17:31,935 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-13 22:17:31,935 [printer.py:reinit()] - # Extruders: 1
2024-04-13 22:17:31,936 [printer.py:reinit()] - # Temperature devices: 4
2024-04-13 22:17:31,936 [printer.py:reinit()] - # Fans: 3
2024-04-13 22:17:31,936 [printer.py:reinit()] - # Output pins: 0
2024-04-13 22:17:31,936 [printer.py:reinit()] - # Leds: 0
2024-04-13 22:17:31,936 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-13 22:17:31,956 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-13 22:17:31,959 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-13 22:17:32,247 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-13 22:17:32,248 [screen.py:init_klipper()] - Printer initialized
2024-04-13 22:17:32,248 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-13 22:17:32,248 [printer.py:change_state()] - Adding callback for state: ready
2024-04-13 22:17:32,255 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-13 22:17:32,264 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-13 22:17:32,350 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-13 22:17:32,356 [main_menu.py:add_device()] - Adding device: extruder
2024-04-13 22:17:32,364 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-13 22:17:32,370 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-13 22:17:32,375 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-13 22:17:32,380 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-13 22:17:32,411 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-13 22:17:32,412 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-13 22:17:32,437 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-13 22:17:32,439 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-13 22:17:32,449 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-13 23:17:12,699 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-14 00:31:08,755 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-14 00:31:08,780 [screen.py:wake_screen()] - Screen wake up
2024-04-14 00:46:22,181 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-14 00:46:22,182 [printer.py:change_state()] - Adding callback for state: printing
2024-04-14 00:46:22,203 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-14 00:46:22,430 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-14 00:46:22,437 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-14 00:46:22,453 [job_status.py:update_file_metadata()] - Update Metadata. File: Cube_ABS_11m39s.gcode Size: 60497
2024-04-14 00:46:22,462 [job_status.py:show_file_thumbnail()] - Cube_ABS_11m39s.gcode
2024-04-14 01:02:44,668 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-04-14 01:02:44,668 [printer.py:change_state()] - Adding callback for state: paused
2024-04-14 01:02:44,678 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-04-14 01:02:44,721 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 01:02:44,825 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-14 01:02:44,830 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-04-14 01:02:44,838 [job_status.py:update_file_metadata()] - Update Metadata. File: Cube_ABS_11m39s.gcode Size: 60497
2024-04-14 01:02:44,844 [job_status.py:show_file_thumbnail()] - Cube_ABS_11m39s.gcode
2024-04-14 01:02:44,849 [screen.py:_load_panel()] - Loading panel: extrude
2024-04-14 01:02:44,925 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-04-14 01:02:46,918 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2024-04-14 01:02:46,919 [printer.py:change_state()] - Adding callback for state: ready
2024-04-14 01:06:15,604 [extrude.py:change_distance()] - ### Distance 5
2024-04-14 01:06:34,933 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-14 01:06:34,933 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-14 01:06:34,934 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-14 01:06:34,935 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-14 01:06:34,938 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 01:06:34,999 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-14 01:06:38,699 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-14 01:06:38,713 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-14 01:06:38,723 [printer.py:configure_cameras()] - Cameras: []
2024-04-14 01:06:38,724 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-14 01:06:38,724 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-14 01:06:38,735 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-14 01:06:38,900 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.470'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n0.005000, 0.010000, 0.032500, 0.037500, 0.055000\n-0.012500, 0.022500, 0.015000, 0.075000, 0.045000\n-0.060000, -0.055000, -0.010000, 0.002500, 0.032500\n-0.060000, -0.050000, -0.055000, 0.012500, 0.027500\n-0.135000, -0.132500, -0.065000, -0.050000, -0.025000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '30.0', 'max_x': '130.0', 'min_y': '30.0', 'max_y': '130.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[0.005, 0.01, 0.0325, 0.0375, 0.055], [-0.0125, 0.0225, 0.015, 0.075, 0.045], [-0.06, -0.055, -0.01, 0.0025, 0.0325], [-0.06, -0.05, -0.055, 0.0125, 0.0275], [-0.135, -0.1325, -0.065, -0.05, -0.025]], 'min_x': 30.0, 'max_x': 130.0, 'min_y': 30.0, 'max_y': 130.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.47, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-14 01:06:38,904 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-14 01:06:38,905 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-14 01:06:38,905 [printer.py:reinit()] - # Extruders: 1
2024-04-14 01:06:38,905 [printer.py:reinit()] - # Temperature devices: 4
2024-04-14 01:06:38,906 [printer.py:reinit()] - # Fans: 3
2024-04-14 01:06:38,906 [printer.py:reinit()] - # Output pins: 0
2024-04-14 01:06:38,906 [printer.py:reinit()] - # Leds: 0
2024-04-14 01:06:38,906 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-14 01:06:38,929 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-14 01:06:38,930 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-14 01:06:39,177 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-14 01:06:39,177 [screen.py:init_klipper()] - Printer initialized
2024-04-14 01:06:39,177 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-14 01:06:39,177 [printer.py:change_state()] - Adding callback for state: ready
2024-04-14 01:06:39,179 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-14 01:06:39,181 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 01:06:39,246 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-14 01:06:39,253 [main_menu.py:add_device()] - Adding device: extruder
2024-04-14 01:06:39,259 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-14 01:06:39,265 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-14 01:06:39,270 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-14 01:06:39,276 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-14 01:06:39,313 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-14 01:06:39,314 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-14 01:06:39,342 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-14 01:06:39,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-14 01:06:39,356 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-14 01:07:00,954 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-14 01:07:00,955 [printer.py:change_state()] - Adding callback for state: printing
2024-04-14 01:07:00,976 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 01:07:01,123 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-14 01:07:01,128 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-14 01:07:01,136 [job_status.py:update_file_metadata()] - Update Metadata. File: [a]_spool_holder_3mmfoam_x1_ABS_48m21s.gcode Size: 2208212
2024-04-14 01:07:01,142 [job_status.py:show_file_thumbnail()] - [a]_spool_holder_3mmfoam_x1_ABS_48m21s.gcode
2024-04-14 02:05:00,145 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-14 02:05:00,145 [printer.py:change_state()] - Adding callback for state: ready
2024-04-14 02:05:00,156 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-14 02:06:15,698 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-14 03:06:43,165 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-14 03:06:43,165 [printer.py:change_state()] - Adding callback for state: printing
2024-04-14 03:06:43,168 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-04-14 03:06:43,170 [job_status.py:update_file_metadata()] - Update Metadata. File: DD72 makerscoin_ABS_2h24m.gcode Size: 10961523
2024-04-14 03:06:43,175 [job_status.py:show_file_thumbnail()] - DD72 makerscoin_ABS_2h24m.gcode
2024-04-14 03:06:43,178 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-14 03:06:43,190 [screen.py:wake_screen()] - Screen wake up
2024-04-14 03:06:43,256 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 03:06:43,375 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-14 03:06:43,380 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-14 03:06:43,389 [job_status.py:update_file_metadata()] - Update Metadata. File: DD72 makerscoin_ABS_2h24m.gcode Size: 10961523
2024-04-14 03:06:43,395 [job_status.py:show_file_thumbnail()] - DD72 makerscoin_ABS_2h24m.gcode
2024-04-14 03:21:49,436 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-14 03:21:49,436 [printer.py:change_state()] - Adding callback for state: ready
2024-04-14 03:21:49,444 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'standby'
2024-04-14 03:40:51,420 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=640, height=480)
2024-04-14 03:40:56,764 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-14 03:40:56,765 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-14 03:40:56,765 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-14 03:40:56,766 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-14 03:40:56,771 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-14 03:40:56,772 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 03:40:56,841 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-14 03:40:59,699 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-14 03:40:59,712 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-14 03:40:59,723 [printer.py:configure_cameras()] - Cameras: []
2024-04-14 03:40:59,724 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-14 03:40:59,724 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-14 03:40:59,736 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-14 03:40:59,755 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-14 03:40:59,758 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-14 03:40:59,759 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-14 03:40:59,759 [printer.py:reinit()] - # Extruders: 1
2024-04-14 03:40:59,759 [printer.py:reinit()] - # Temperature devices: 4
2024-04-14 03:40:59,759 [printer.py:reinit()] - # Fans: 3
2024-04-14 03:40:59,759 [printer.py:reinit()] - # Output pins: 0
2024-04-14 03:40:59,759 [printer.py:reinit()] - # Leds: 0
2024-04-14 03:40:59,759 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-14 03:40:59,774 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-14 03:40:59,776 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-14 03:41:00,035 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-14 03:41:00,036 [screen.py:init_klipper()] - Printer initialized
2024-04-14 03:41:00,036 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-14 03:41:00,037 [printer.py:change_state()] - Adding callback for state: startup
2024-04-14 03:41:00,250 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-14 03:41:00,251 [printer.py:change_state()] - Adding callback for state: ready
2024-04-14 03:41:00,252 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-14 03:41:00,256 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 03:41:00,322 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-14 03:41:00,329 [main_menu.py:add_device()] - Adding device: extruder
2024-04-14 03:41:00,334 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-14 03:41:00,340 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-14 03:41:00,345 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-14 03:41:00,351 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-14 03:41:00,384 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-14 03:41:00,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-14 03:41:00,411 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-14 03:41:00,412 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-14 03:41:00,424 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-14 04:02:41,598 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-14 04:02:41,598 [printer.py:change_state()] - Adding callback for state: printing
2024-04-14 04:02:41,610 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 04:02:41,717 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-14 04:02:41,722 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-14 04:02:41,730 [job_status.py:update_file_metadata()] - Update Metadata. File: DD72 makerscoin_ABS_2h24m.gcode Size: 10961523
2024-04-14 04:02:41,735 [job_status.py:show_file_thumbnail()] - DD72 makerscoin_ABS_2h24m.gcode
2024-04-14 04:06:43,698 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-14 06:33:02,532 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-14 06:33:02,532 [printer.py:change_state()] - Adding callback for state: ready
2024-04-14 06:33:02,537 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-14 06:33:02,565 [screen.py:wake_screen()] - Screen wake up
2024-04-14 06:33:02,636 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-14 06:46:34,498 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-14 06:46:34,498 [printer.py:change_state()] - Adding callback for state: printing
2024-04-14 06:46:34,502 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-04-14 06:46:34,532 [screen.py:show_panel()] - Reinitializing panel
2024-04-14 06:46:34,638 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-14 06:46:34,643 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-14 06:46:34,651 [job_status.py:update_file_metadata()] - Update Metadata. File: DD72 makerscoin_ABS_2h24m.gcode Size: 10961523
2024-04-14 06:46:34,656 [job_status.py:show_file_thumbnail()] - DD72 makerscoin_ABS_2h24m.gcode
2024-04-14 07:46:20,700 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-14 09:21:28,170 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-14 09:21:28,170 [printer.py:change_state()] - Adding callback for state: ready
2024-04-14 09:21:28,178 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-14 09:21:28,199 [screen.py:wake_screen()] - Screen wake up
2024-04-14 09:21:28,272 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-14 10:21:28,699 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-15 01:07:57,136 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-15 01:07:57,136 [printer.py:change_state()] - Adding callback for state: printing
2024-04-15 01:07:57,138 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-04-15 01:07:57,141 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-15 01:07:57,158 [screen.py:wake_screen()] - Screen wake up
2024-04-15 01:07:57,224 [screen.py:show_panel()] - Reinitializing panel
2024-04-15 01:07:57,332 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-15 01:07:57,337 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-15 01:07:57,345 [job_status.py:update_file_metadata()] - Update Metadata. File: DD72 makerscoin_ABS_2h24m.gcode Size: 10961523
2024-04-15 01:07:57,350 [job_status.py:show_file_thumbnail()] - DD72 makerscoin_ABS_2h24m.gcode
2024-04-15 02:07:57,697 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-15 02:39:00,995 [screen.py:close_screensaver()] - Closing Screensaver
2024-04-15 02:39:01,019 [screen.py:wake_screen()] - Screen wake up
2024-04-15 03:38:39,652 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-15 03:38:39,652 [printer.py:change_state()] - Adding callback for state: ready
2024-04-15 03:38:39,665 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-04-15 03:39:01,699 [screen.py:show_screensaver()] - Showing Screensaver
2024-04-15 05:17:11,425 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-15 05:17:11,426 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-112-g7b42c2b
2024-04-15 05:17:11,426 [functions.py:log_start()] - Python version: 3.9
2024-04-15 05:17:11,576 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-15 05:17:11,578 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-15 05:17:11,591 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-15 05:17:11,593 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
extruder = False
heater_bed = False

=======================
2024-04-15 05:17:11,593 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-15 05:17:11,683 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-15 05:17:11,683 [config.py:install_language()] - Using lang en
2024-04-15 05:17:11,701 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-15 05:17:11,702 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-15 05:17:11,704 [screen.py:__init__()] - Screen resolution: 640x480
2024-04-15 05:17:11,705 [KlippyGtk.py:__init__()] - Font size: 14.9 (medium)
2024-04-15 05:17:12,404 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-15 05:17:12,413 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-15 05:17:12,420 [screen.py:initial_connection()] - Default printer: None
2024-04-15 05:17:12,452 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-15 05:17:12,453 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-15 05:17:12,497 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-15 05:17:12,505 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-15 05:17:12,505 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-15 05:17:12,520 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-15 05:17:22,649 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-15 05:17:22,650 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-15 05:17:22,660 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-15 05:17:32,650 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-15 05:17:32,650 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-15 05:17:32,661 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-15 05:17:42,647 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-15 05:17:42,648 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-15 05:17:42,660 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-15 05:17:42,669 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-15 05:17:42,678 [_logging.py:info()] - Websocket connected
2024-04-15 05:17:42,678 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-15 05:17:42,679 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-15 05:17:42,688 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-15 05:17:42,696 [printer.py:configure_cameras()] - Cameras: []
2024-04-15 05:17:42,697 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-15 05:17:42,697 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-15 05:17:42,707 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-15 05:17:42,829 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-15 05:17:42,831 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-15 05:17:42,832 [printer.py:reinit()] - Klipper version: v0.12.0-85-gd785b396-dirty
2024-04-15 05:17:42,832 [printer.py:reinit()] - # Extruders: 1
2024-04-15 05:17:42,832 [printer.py:reinit()] - # Temperature devices: 4
2024-04-15 05:17:42,832 [printer.py:reinit()] - # Fans: 3
2024-04-15 05:17:42,832 [printer.py:reinit()] - # Output pins: 0
2024-04-15 05:17:42,832 [printer.py:reinit()] - # Leds: 0
2024-04-15 05:17:42,833 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-15 05:17:42,846 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-15 05:17:42,848 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-15 05:17:43,125 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-15 05:17:43,125 [screen.py:init_klipper()] - Printer initialized
2024-04-15 05:17:43,125 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-15 05:17:43,125 [printer.py:change_state()] - Adding callback for state: ready
2024-04-15 05:17:43,127 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-15 05:17:43,130 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-15 05:17:43,208 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-15 05:17:43,214 [main_menu.py:add_device()] - Adding device: extruder
2024-04-15 05:17:43,222 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-15 05:17:43,228 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-15 05:17:43,234 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-15 05:17:43,240 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-15 05:17:43,271 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-15 05:17:43,272 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-15 05:17:43,295 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-15 05:17:43,297 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-15 05:17:43,307 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-15 05:22:37,649 [KlippyGtk.py:Dialog()] - Showing dialog Temperature (width=640, height=480)
2024-04-15 05:22:37,650 [heatergraph.py:event_cb()] - Entering Fullscreen
2024-04-22 19:43:45,296 [heatergraph.py:event_cb()] - Graph area: 364.9941711425781 237.99610900878906
2024-04-22 19:43:45,417 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-22 20:12:09,045 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-22 20:12:09,045 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-22 20:12:09,045 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-22 20:12:09,046 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 20:12:09,048 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 20:12:09,091 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 20:12:12,342 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:12:12,354 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 20:12:12,365 [printer.py:configure_cameras()] - Cameras: []
2024-04-22 20:12:12,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 20:12:12,366 [screen.py:init_klipper()] - Klipper not connected
2024-04-22 20:12:15,341 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:12:15,352 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-325-g99b97af', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 20:12:15,353 [screen.py:init_klipper()] - Klipper not connected
2024-04-22 20:12:17,069 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-04-22 20:12:17,069 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-04-22 20:12:17,070 [screen.py:websocket_disconnected()] - ### websocket_disconnected
2024-04-22 20:12:17,072 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 20:12:17,126 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 20:12:17,199 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-22 20:12:17,203 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 20:12:17,266 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 20:12:17,278 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 20:12:17,279 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:12:17,286 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-22 20:12:18,343 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:12:18,349 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-22 20:12:18,351 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: 'bool' object is not subscriptable
  File "/home/pi/KlipperScreen/screen.py", line 952, in init_klipper
    server_info = self.apiclient.get_server_info()["result"]
NoneType: None
2024-04-22 20:12:31,745 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-22 20:12:31,746 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-15-g7e58864
2024-04-22 20:12:31,746 [functions.py:log_start()] - Python version: 3.9
2024-04-22 20:12:31,850 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-22 20:12:31,850 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-22 20:12:31,863 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-22 20:12:31,866 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
extruder = False
heater_bed = False

=======================
2024-04-22 20:12:31,867 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-22 20:12:31,958 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-22 20:12:31,958 [config.py:install_language()] - Using lang en
2024-04-22 20:12:31,974 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-22 20:12:31,976 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-22 20:12:31,979 [screen.py:__init__()] - Screen resolution: 640x480
2024-04-22 20:12:31,980 [KlippyGtk.py:__init__()] - Font size: 14.9 (medium)
2024-04-22 20:12:32,331 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-22 20:12:32,342 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-22 20:12:32,352 [screen.py:initial_connection()] - Default printer: None
2024-04-22 20:12:32,411 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-22 20:12:32,411 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-22 20:12:32,471 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 20:12:32,480 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 20:12:32,481 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:12:32,517 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-22 20:12:32,536 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-22 20:12:32,556 [_logging.py:info()] - Websocket connected
2024-04-22 20:12:32,556 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-22 20:12:32,671 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:12:32,682 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 20:12:32,692 [printer.py:configure_cameras()] - Cameras: []
2024-04-22 20:12:32,693 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-327-g9447494', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 20:12:32,693 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 20:12:32,708 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 20:12:32,881 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'minimum_cruise_ratio': 0.8, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [{'type': 'deprecated_option', 'message': "Option 'max_accel_to_decel' in section 'printer' is deprecated.", 'section': 'printer', 'option': 'max_accel_to_decel'}], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 20:12:32,884 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 20:12:32,885 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-04-22 20:12:32,885 [printer.py:reinit()] - # Extruders: 1
2024-04-22 20:12:32,885 [printer.py:reinit()] - # Temperature devices: 4
2024-04-22 20:12:32,885 [printer.py:reinit()] - # Fans: 3
2024-04-22 20:12:32,886 [printer.py:reinit()] - # Output pins: 0
2024-04-22 20:12:32,886 [printer.py:reinit()] - # Leds: 0
2024-04-22 20:12:32,886 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 20:12:32,905 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 20:12:32,908 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-22 20:12:33,158 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 20:12:33,158 [screen.py:init_klipper()] - Printer initialized
2024-04-22 20:12:33,159 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 20:12:33,159 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 20:12:33,166 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 20:12:33,182 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-22 20:12:33,299 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 20:12:33,307 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 20:12:33,314 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 20:12:33,320 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-22 20:12:33,326 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-22 20:12:33,332 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-22 20:12:33,367 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 20:12:33,368 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 20:12:33,395 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-22 20:12:33,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-22 20:12:33,411 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-22 20:13:42,194 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-04-22 20:13:42,195 [functions.py:log_start()] - KlipperScreen Version: v0.4.0-15-g7e58864
2024-04-22 20:13:42,195 [functions.py:log_start()] - Python version: 3.9
2024-04-22 20:13:42,385 [config.py:get_config_file_location()] - Passed config (-c): .
2024-04-22 20:13:42,388 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-04-22 20:13:42,410 [config.py:log_config()] -  ===== Config File =====

=======================
2024-04-22 20:13:42,411 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
extruder = False
heater_bed = False

=======================
2024-04-22 20:13:42,412 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-04-22 20:13:42,500 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-04-22 20:13:42,500 [config.py:install_language()] - Using lang en
2024-04-22 20:13:42,516 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-04-22 20:13:42,517 [screen.py:__init__()] - Wayland: False Display name: :0
2024-04-22 20:13:42,518 [screen.py:__init__()] - Screen resolution: 640x480
2024-04-22 20:13:42,519 [KlippyGtk.py:__init__()] - Font size: 14.9 (medium)
2024-04-22 20:13:43,156 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-04-22 20:13:43,165 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-04-22 20:13:43,172 [screen.py:initial_connection()] - Default printer: None
2024-04-22 20:13:43,204 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-04-22 20:13:43,205 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-04-22 20:13:43,250 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 20:13:43,257 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 20:13:43,257 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:13:43,271 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-22 20:13:53,353 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 20:13:53,353 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:13:53,358 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-04-22 20:14:03,352 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-04-22 20:14:03,353 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:14:03,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-04-22 20:14:03,373 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-04-22 20:14:03,380 [_logging.py:info()] - Websocket connected
2024-04-22 20:14:03,380 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-04-22 20:14:03,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:14:03,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 20:14:03,399 [printer.py:configure_cameras()] - Cameras: []
2024-04-22 20:14:03,400 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-327-g9447494', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 20:14:03,400 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 20:14:03,410 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 20:14:03,460 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.323', 'pid_ki': '3.510', 'pid_kd': '49.357'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.323, 'pid_ki': 3.51, 'pid_kd': 49.357, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'minimum_cruise_ratio': 0.8, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [{'type': 'deprecated_option', 'message': "Option 'max_accel_to_decel' in section 'printer' is deprecated.", 'section': 'printer', 'option': 'max_accel_to_decel'}], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 20:14:03,462 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 20:14:03,463 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-04-22 20:14:03,463 [printer.py:reinit()] - # Extruders: 1
2024-04-22 20:14:03,463 [printer.py:reinit()] - # Temperature devices: 4
2024-04-22 20:14:03,463 [printer.py:reinit()] - # Fans: 3
2024-04-22 20:14:03,463 [printer.py:reinit()] - # Output pins: 0
2024-04-22 20:14:03,463 [printer.py:reinit()] - # Leds: 0
2024-04-22 20:14:03,463 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 20:14:03,479 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 20:14:03,480 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-22 20:14:03,759 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 20:14:03,759 [screen.py:init_klipper()] - Printer initialized
2024-04-22 20:14:03,759 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 20:14:03,759 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 20:14:03,761 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 20:14:03,765 [screen.py:_load_panel()] - Loading panel: main_menu
2024-04-22 20:14:03,843 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 20:14:03,849 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 20:14:03,856 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 20:14:03,862 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-22 20:14:03,867 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-22 20:14:03,872 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-22 20:14:03,903 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 20:14:03,904 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 20:14:03,927 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-22 20:14:03,929 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-22 20:14:03,939 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-22 20:27:06,504 [KlippyGtk.py:Dialog()] - Showing dialog Temperature (width=640, height=480)
2024-04-22 20:27:06,505 [heatergraph.py:event_cb()] - Entering Fullscreen
2024-04-22 20:27:07,193 [heatergraph.py:event_cb()] - Graph area: 393.99371337890625 355.99432373046875
2024-04-22 20:27:07,332 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-22 20:32:32,760 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=640, height=480)
2024-04-22 20:35:56,230 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-22 20:35:56,230 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-22 20:35:56,231 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-22 20:35:56,231 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 20:35:56,234 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-04-22 20:35:56,235 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 20:35:56,270 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 20:35:59,848 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:35:59,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 20:35:59,868 [printer.py:configure_cameras()] - Cameras: []
2024-04-22 20:35:59,869 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-327-g9447494', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 20:35:59,869 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 20:35:59,880 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 20:35:59,959 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '24.094', 'pid_ki': '2.868', 'pid_kd': '50.598'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|int %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|int %}\n\nM73 P0\nG21\nM107\nG90\nM83\nM190 S{BED_TEMP}\nM109 S150\nSET_GCODE_OFFSET Z=0.0\nG28\nZ_TILT_ADJUST\nG28\nBED_MESH_CLEAR\nBED_MESH_CALIBRATE\nG1 X4.1 Y20 Z5.0 F2000\nM109 S{EXTRUDER_TEMP}\n\nM117 Priming\nLINE_PURGE\n\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 24.094, 'pid_ki': 2.868, 'pid_kd': 50.598, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'minimum_cruise_ratio': 0.8, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [{'type': 'deprecated_option', 'message': "Option 'max_accel_to_decel' in section 'printer' is deprecated.", 'section': 'printer', 'option': 'max_accel_to_decel'}], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 20:35:59,962 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 20:35:59,963 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-04-22 20:35:59,963 [printer.py:reinit()] - # Extruders: 1
2024-04-22 20:35:59,963 [printer.py:reinit()] - # Temperature devices: 4
2024-04-22 20:35:59,963 [printer.py:reinit()] - # Fans: 3
2024-04-22 20:35:59,963 [printer.py:reinit()] - # Output pins: 0
2024-04-22 20:35:59,963 [printer.py:reinit()] - # Leds: 0
2024-04-22 20:35:59,964 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 20:35:59,979 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 20:35:59,980 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-22 20:36:00,265 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 20:36:00,266 [screen.py:init_klipper()] - Printer initialized
2024-04-22 20:36:00,266 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 20:36:00,266 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 20:36:00,268 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 20:36:00,273 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 20:36:00,366 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 20:36:00,373 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 20:36:00,379 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 20:36:00,386 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-22 20:36:00,391 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-22 20:36:00,397 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-22 20:36:00,434 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 20:36:00,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 20:36:00,464 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-22 20:36:00,468 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-22 20:36:00,495 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-22 20:36:07,231 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-22 20:36:07,231 [printer.py:change_state()] - Adding callback for state: printing
2024-04-22 20:36:07,243 [screen.py:_load_panel()] - Loading panel: job_status
2024-04-22 20:36:07,413 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-22 20:36:07,418 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-22 20:36:07,430 [job_status.py:update_file_metadata()] - Update Metadata. File: OrcaCube_ABS_38m23s.gcode Size: 3894296
2024-04-22 20:36:07,440 [job_status.py:show_file_thumbnail()] - OrcaCube_ABS_38m23s.gcode
2024-04-22 20:47:02,711 [screen.py:show_popup_message()] - error: Probe samples exceed samples_tolerance
2024-04-22 20:47:02,818 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-22 20:47:02,818 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 20:47:02,828 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-04-22 20:48:34,442 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-22 20:48:34,443 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-22 20:48:34,443 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-22 20:48:34,444 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 20:48:34,446 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 20:48:34,507 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 20:48:37,850 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 20:48:37,860 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 20:48:37,870 [printer.py:configure_cameras()] - Cameras: []
2024-04-22 20:48:37,870 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-327-g9447494', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 20:48:37,870 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 20:48:37,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 20:48:37,901 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}\n{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}\n{% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}\n{% set FILAMENT = params.FILAMENT|default(PLA) %}\n\nSET_TEMP HEATER="bed" TEMP={BED_TEMP}\nSET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\nDISPLAYTEXT TEXT="Homing"\nG28\n{% endif %}\nDISPLAYTEXT TEXT="Heating Bed"\nSET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\nDISPLAYTEXT TEXT="Heat soaking"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}\n{% endif %}\n{% if not printer.z_tilt.applied %}\nDISPLAYTEXT TEXT="Z tilt thingy"\nZ_TILT_ADJUST\n{% endif %}\nMATERIAL_PA MATERIAL={FILAMENT}\nDISPLAYTEXT TEXT="Heating Extruder"\nSET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1\n\nBED_MESH_CALIBRATE\nSET_FAN_SPEED FAN=rebreather SPEED=1\nSET_FAN_SPEED FAN=stepper_fans SPEED=0.25\nMATERIAL_PA MATERIAL={FILAMENT}\nG4 P1000\nLINE_PURGE\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\n{% endif %}\nDISPLAYTEXT TEXT="Printing..."'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '170', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '24.094', 'pid_ki': '2.868', 'pid_kd': '50.598'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}\n{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}\n{% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}\n{% set FILAMENT = params.FILAMENT|default(PLA) %}\n\nSET_TEMP HEATER="bed" TEMP={BED_TEMP}\nSET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\nDISPLAYTEXT TEXT="Homing"\nG28\n{% endif %}\nDISPLAYTEXT TEXT="Heating Bed"\nSET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\nDISPLAYTEXT TEXT="Heat soaking"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}\n{% endif %}\n{% if not printer.z_tilt.applied %}\nDISPLAYTEXT TEXT="Z tilt thingy"\nZ_TILT_ADJUST\n{% endif %}\nMATERIAL_PA MATERIAL={FILAMENT}\nDISPLAYTEXT TEXT="Heating Extruder"\nSET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1\n\nBED_MESH_CALIBRATE\nSET_FAN_SPEED FAN=rebreather SPEED=1\nSET_FAN_SPEED FAN=stepper_fans SPEED=0.25\nMATERIAL_PA MATERIAL={FILAMENT}\nG4 P1000\nLINE_PURGE\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\n{% endif %}\nDISPLAYTEXT TEXT="Printing..."', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 24.094, 'pid_ki': 2.868, 'pid_kd': 50.598, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'minimum_cruise_ratio': 0.8, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [{'type': 'deprecated_option', 'message': "Option 'max_accel_to_decel' in section 'printer' is deprecated.", 'section': 'printer', 'option': 'max_accel_to_decel'}], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 20:48:37,904 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 20:48:37,905 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-04-22 20:48:37,905 [printer.py:reinit()] - # Extruders: 1
2024-04-22 20:48:37,905 [printer.py:reinit()] - # Temperature devices: 4
2024-04-22 20:48:37,905 [printer.py:reinit()] - # Fans: 3
2024-04-22 20:48:37,905 [printer.py:reinit()] - # Output pins: 0
2024-04-22 20:48:37,905 [printer.py:reinit()] - # Leds: 0
2024-04-22 20:48:37,906 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 20:48:37,920 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 20:48:37,921 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-22 20:48:38,184 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 20:48:38,184 [screen.py:init_klipper()] - Printer initialized
2024-04-22 20:48:38,184 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 20:48:38,184 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 20:48:38,187 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 20:48:38,192 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 20:48:38,277 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 20:48:38,283 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 20:48:38,289 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 20:48:38,295 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-22 20:48:38,301 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-22 20:48:38,307 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-22 20:48:38,341 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 20:48:38,343 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 20:48:38,371 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-22 20:48:38,373 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-22 20:48:38,384 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-22 20:48:47,175 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-22 20:48:47,176 [printer.py:change_state()] - Adding callback for state: printing
2024-04-22 20:48:47,188 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 20:48:47,294 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-22 20:48:47,299 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-22 20:48:47,307 [job_status.py:update_file_metadata()] - Update Metadata. File: OrcaCube_ABS_38m23s.gcode Size: 3894296
2024-04-22 20:48:47,312 [job_status.py:show_file_thumbnail()] - OrcaCube_ABS_38m23s.gcode
2024-04-22 20:53:25,179 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 20:53:25,255 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-22 20:53:25,255 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 20:53:25,265 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-04-22 21:03:13,857 [job_status.py:update_file_metadata()] - Update Metadata. File: OrcaCube_ABS_38m23s.gcode Size: 3893739
2024-04-22 21:03:13,863 [job_status.py:show_file_thumbnail()] - OrcaCube_ABS_38m23s.gcode
2024-04-22 21:03:13,867 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:03:16,153 [job_status.py:set_state()] - Changing job_status state from 'error' to 'standby'
2024-04-22 21:03:21,923 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-22 21:03:21,923 [printer.py:change_state()] - Adding callback for state: printing
2024-04-22 21:03:21,931 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-22 21:03:21,939 [job_status.py:update_file_metadata()] - Update Metadata. File: OrcaCube_ABS_38m23s.gcode Size: 3893739
2024-04-22 21:03:21,947 [job_status.py:show_file_thumbnail()] - OrcaCube_ABS_38m23s.gcode
2024-04-22 21:03:21,955 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:03:21,961 [job_status.py:update_file_metadata()] - Update Metadata. File: OrcaCube_ABS_38m23s.gcode Size: 3893739
2024-04-22 21:03:21,966 [job_status.py:show_file_thumbnail()] - OrcaCube_ABS_38m23s.gcode
2024-04-22 21:03:22,020 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 21:03:22,132 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-22 21:03:22,137 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-22 21:03:22,146 [job_status.py:update_file_metadata()] - Update Metadata. File: OrcaCube_ABS_38m23s.gcode Size: 3893739
2024-04-22 21:03:22,151 [job_status.py:show_file_thumbnail()] - OrcaCube_ABS_38m23s.gcode
2024-04-22 21:03:22,189 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-22 21:03:22,189 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 21:03:22,195 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
2024-04-22 21:05:43,054 [job_status.py:set_state()] - Changing job_status state from 'error' to 'standby'
2024-04-22 21:05:52,201 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:05:52,351 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'error'
2024-04-22 21:05:52,355 [job_status.py:update_file_metadata()] - Update Metadata. File: OrcaCube_ABS_38m23s.gcode Size: 3893739
2024-04-22 21:05:52,362 [job_status.py:show_file_thumbnail()] - OrcaCube_ABS_38m23s.gcode
2024-04-22 21:06:35,944 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-22 21:06:35,944 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-22 21:06:35,945 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-22 21:06:35,945 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 21:06:35,948 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 21:06:36,016 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 21:06:38,847 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 21:06:38,857 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 21:06:38,866 [printer.py:configure_cameras()] - Cameras: []
2024-04-22 21:06:38,866 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-327-g9447494', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 21:06:38,866 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 21:06:38,878 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 21:06:38,900 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}\n{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}\n{% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}\n{% set FILAMENT = params.FILAMENT|default(PLA) %}\n\nSET_TEMP HEATER="bed" TEMP={BED_TEMP}\nSET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\nDISPLAYTEXT TEXT="Homing"\nG28\n{% endif %}\nDISPLAYTEXT TEXT="Heating Bed"\nSET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\nDISPLAYTEXT TEXT="Heat soaking"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}\n{% endif %}\n{% if not printer.z_tilt.applied %}\nDISPLAYTEXT TEXT="Z tilt thingy"\nZ_TILT_ADJUST\n{% endif %}\nMATERIAL_PA MATERIAL={FILAMENT}\nDISPLAYTEXT TEXT="Heating Extruder"\nSET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1\n\nBED_MESH_CALIBRATE\nSET_FAN_SPEED FAN=rebreather SPEED=1\nSET_FAN_SPEED FAN=stepper_fans SPEED=0.25\nMATERIAL_PA MATERIAL={FILAMENT}\nG4 P1000\nLINE_PURGE\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\n{% endif %}\nDISPLAYTEXT TEXT="Printing..."'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '10', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '24.094', 'pid_ki': '2.868', 'pid_kd': '50.598'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}\n{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}\n{% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}\n{% set FILAMENT = params.FILAMENT|default(PLA) %}\n\nSET_TEMP HEATER="bed" TEMP={BED_TEMP}\nSET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\nDISPLAYTEXT TEXT="Homing"\nG28\n{% endif %}\nDISPLAYTEXT TEXT="Heating Bed"\nSET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\nDISPLAYTEXT TEXT="Heat soaking"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}\n{% endif %}\n{% if not printer.z_tilt.applied %}\nDISPLAYTEXT TEXT="Z tilt thingy"\nZ_TILT_ADJUST\n{% endif %}\nMATERIAL_PA MATERIAL={FILAMENT}\nDISPLAYTEXT TEXT="Heating Extruder"\nSET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1\n\nBED_MESH_CALIBRATE\nSET_FAN_SPEED FAN=rebreather SPEED=1\nSET_FAN_SPEED FAN=stepper_fans SPEED=0.25\nMATERIAL_PA MATERIAL={FILAMENT}\nG4 P1000\nLINE_PURGE\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\n{% endif %}\nDISPLAYTEXT TEXT="Printing..."', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 24.094, 'pid_ki': 2.868, 'pid_kd': 50.598, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'minimum_cruise_ratio': 0.8, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [{'type': 'deprecated_option', 'message': "Option 'max_accel_to_decel' in section 'printer' is deprecated.", 'section': 'printer', 'option': 'max_accel_to_decel'}], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 21:06:38,903 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 21:06:38,904 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-04-22 21:06:38,904 [printer.py:reinit()] - # Extruders: 1
2024-04-22 21:06:38,904 [printer.py:reinit()] - # Temperature devices: 4
2024-04-22 21:06:38,904 [printer.py:reinit()] - # Fans: 3
2024-04-22 21:06:38,904 [printer.py:reinit()] - # Output pins: 0
2024-04-22 21:06:38,904 [printer.py:reinit()] - # Leds: 0
2024-04-22 21:06:38,905 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 21:06:38,919 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 21:06:38,921 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-22 21:06:39,183 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 21:06:39,183 [screen.py:init_klipper()] - Printer initialized
2024-04-22 21:06:39,183 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-04-22 21:06:39,183 [printer.py:change_state()] - Adding callback for state: startup
2024-04-22 21:06:39,391 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-04-22 21:06:39,391 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 21:06:39,392 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 21:06:39,397 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 21:06:39,478 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 21:06:39,485 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 21:06:39,491 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 21:06:39,499 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-22 21:06:39,505 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-22 21:06:39,511 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-22 21:06:39,553 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 21:06:39,554 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 21:06:39,582 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-22 21:06:39,584 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-22 21:06:39,596 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-22 21:06:46,395 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:07:11,499 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-22 21:07:11,500 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-22 21:07:11,501 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-22 21:07:11,502 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 21:07:11,506 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 21:07:11,566 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 21:07:14,848 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 21:07:14,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 21:07:14,869 [printer.py:configure_cameras()] - Cameras: []
2024-04-22 21:07:14,869 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-327-g9447494', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 21:07:14,869 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 21:07:14,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 21:07:14,902 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}\n{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}\n{% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}\n{% set FILAMENT = params.FILAMENT|default(PLA) %}\n\nSET_TEMP HEATER="bed" TEMP={BED_TEMP}\nSET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\nDISPLAYTEXT TEXT="Homing"\nG28\n{% endif %}\nDISPLAYTEXT TEXT="Heating Bed"\nSET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\nDISPLAYTEXT TEXT="Heat soaking"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}\n{% endif %}\n{% if not printer.z_tilt.applied %}\nDISPLAYTEXT TEXT="Z tilt thingy"\nZ_TILT_ADJUST\n{% endif %}\nMATERIAL_PA MATERIAL={FILAMENT}\nDISPLAYTEXT TEXT="Heating Extruder"\nSET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1\n\nBED_MESH_CALIBRATE\nSET_FAN_SPEED FAN=rebreather SPEED=1\nSET_FAN_SPEED FAN=stepper_fans SPEED=0.25\nMATERIAL_PA MATERIAL={FILAMENT}\nG4 P1000\nLINE_PURGE\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\n{% endif %}\nDISPLAYTEXT TEXT="Printing..."'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '10', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '24.094', 'pid_ki': '2.868', 'pid_kd': '50.598'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\nG28\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}\n{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}\n{% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}\n{% set FILAMENT = params.FILAMENT|default(PLA) %}\n\nSET_TEMP HEATER="bed" TEMP={BED_TEMP}\nSET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\nDISPLAYTEXT TEXT="Homing"\nG28\n{% endif %}\nDISPLAYTEXT TEXT="Heating Bed"\nSET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\nDISPLAYTEXT TEXT="Heat soaking"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}\n{% endif %}\n{% if not printer.z_tilt.applied %}\nDISPLAYTEXT TEXT="Z tilt thingy"\nZ_TILT_ADJUST\n{% endif %}\nMATERIAL_PA MATERIAL={FILAMENT}\nDISPLAYTEXT TEXT="Heating Extruder"\nSET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1\n\nBED_MESH_CALIBRATE\nSET_FAN_SPEED FAN=rebreather SPEED=1\nSET_FAN_SPEED FAN=stepper_fans SPEED=0.25\nMATERIAL_PA MATERIAL={FILAMENT}\nG4 P1000\nLINE_PURGE\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\n{% endif %}\nDISPLAYTEXT TEXT="Printing..."', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 24.094, 'pid_ki': 2.868, 'pid_kd': 50.598, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'minimum_cruise_ratio': 0.8, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [{'type': 'deprecated_option', 'message': "Option 'max_accel_to_decel' in section 'printer' is deprecated.", 'section': 'printer', 'option': 'max_accel_to_decel'}], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 21:07:14,905 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 21:07:14,906 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-04-22 21:07:14,906 [printer.py:reinit()] - # Extruders: 1
2024-04-22 21:07:14,906 [printer.py:reinit()] - # Temperature devices: 4
2024-04-22 21:07:14,906 [printer.py:reinit()] - # Fans: 3
2024-04-22 21:07:14,906 [printer.py:reinit()] - # Output pins: 0
2024-04-22 21:07:14,906 [printer.py:reinit()] - # Leds: 0
2024-04-22 21:07:14,906 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 21:07:14,921 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 21:07:14,922 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-22 21:07:15,183 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 21:07:15,184 [screen.py:init_klipper()] - Printer initialized
2024-04-22 21:07:15,184 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 21:07:15,184 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 21:07:15,186 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 21:07:15,190 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 21:07:15,268 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 21:07:15,276 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 21:07:15,283 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 21:07:15,290 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-22 21:07:15,297 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-22 21:07:15,304 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-22 21:07:15,346 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 21:07:15,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 21:07:15,375 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-22 21:07:15,377 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-22 21:07:15,390 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-22 21:07:29,288 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:08:32,245 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:08:34,944 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:08:51,361 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:09:38,410 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:09:44,997 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:11:37,076 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:12:44,409 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-04-22 21:12:44,409 [printer.py:change_state()] - Adding callback for state: disconnected
2024-04-22 21:12:44,411 [screen.py:state_disconnected()] - ### Going to disconnected
2024-04-22 21:12:44,411 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 21:12:44,416 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 21:12:44,480 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-04-22 21:12:47,848 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-04-22 21:12:47,858 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-04-22 21:12:47,868 [printer.py:configure_cameras()] - Cameras: []
2024-04-22 21:12:47,868 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-327-g9447494', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-04-22 21:12:47,868 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-04-22 21:12:47,881 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-04-22 21:12:48,146 [screen.py:init_klipper()] - {'configfile': {'config': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0'}, 'mcu EBB36': {'canbus_uuid': 'bfd3856c73b0'}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'exclude_object': {}, 'display_status': {}, 'pause_resume': {}, 'respond': {'default_type': 'command'}, 'force_move': {'enable_force_move': 'TRUE'}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91'}, 'gcode_macro PART_COOLING_FAN_ON': {'gcode': '\nM106 S255'}, 'gcode_macro PART_COOLING_FAN_OFF': {'gcode': '\nM106 S0'}, 'gcode_macro PRINT_START': {'gcode': '\nG28\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}\n{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}\n{% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}\n{% set FILAMENT = params.FILAMENT|default(PLA) %}\n\nSET_TEMP HEATER="bed" TEMP={BED_TEMP}\nSET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\nDISPLAYTEXT TEXT="Homing"\nG28\n{% endif %}\nDISPLAYTEXT TEXT="Heating Bed"\nSET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\nDISPLAYTEXT TEXT="Heat soaking"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}\n{% endif %}\n{% if not printer.z_tilt.applied %}\nDISPLAYTEXT TEXT="Z tilt thingy"\nZ_TILT_ADJUST\n{% endif %}\nMATERIAL_PA MATERIAL={FILAMENT}\nDISPLAYTEXT TEXT="Heating Extruder"\nSET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1\n\nBED_MESH_CALIBRATE\nSET_FAN_SPEED FAN=rebreather SPEED=1\nSET_FAN_SPEED FAN=stepper_fans SPEED=0.25\nMATERIAL_PA MATERIAL={FILAMENT}\nG4 P1000\nLINE_PURGE\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\n{% endif %}\nDISPLAYTEXT TEXT="Printing..."'}, 'gcode_macro PRINT_END': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete'}, 'gcode_macro FILAMENT_LOAD': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82'}, 'gcode_macro FILAMENT_UNLOAD': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82'}, 'gcode_macro HEAT_SOAK': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!'}, 'gcode_macro HEAT_AND_RESUME': {'description': 'Heat the extruder and resume print when target is reached', 'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME'}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}'}, 'gcode_macro SETUP_KAMP_MESHING': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\''}, 'gcode_macro LINE_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}'}, 'gcode_macro SETUP_LINE_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '5000', 'max_accel_to_decel': '1000', 'max_z_velocity': '15', 'max_z_accel': '200', 'square_corner_velocity': '5.0'}, 'adxl345': {'cs_pin': 'EBB36: PB12', 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_mosi_pin': 'EBB36: PB11', 'spi_software_miso_pin': 'EBB36: PB2', 'axes_map': 'x,y,z'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '80, 80, 30', 'max_smoothing': '0.1000'}, 'stepper_x': {'step_pin': 'PC8', 'dir_pin': 'PC9', 'enable_pin': '!PA15', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^EBB36: PB3', 'position_endstop': '165', 'position_max': '165', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'interpolate': 'True', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA13', 'microsteps': '16', 'rotation_distance': '40', 'full_steps_per_rotation': '200', 'endstop_pin': '^PC2', 'position_endstop': '170', 'position_max': '170', 'homing_speed': '50', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance'}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PC6', 'dir_pin': '!PC7', 'enable_pin': '!PA9', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': '-10', 'position_max': '150', 'homing_speed': '8', 'second_homing_speed': '3.0', 'homing_retract_dist': '3'}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'diag_pin': 'PC3', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z1': {'step_pin': 'PB12', 'dir_pin': '!PB11', 'enable_pin': '!PA8', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'diag_pin': 'PC2', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'stepper_z2': {'step_pin': 'PB0', 'dir_pin': '!PB1', 'enable_pin': '!PC4', 'microsteps': '16', 'rotation_distance': '8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto'}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'run_current': '0.2', 'sense_resistor': '0.110', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'EBB36: PD0', 'dir_pin': 'EBB36: PD1', 'enable_pin': '!EBB36: PD2', 'rotation_distance': '22.4523', 'gear_ratio': '50:10', 'microsteps': '32', 'nozzle_diameter': '0.400', 'filament_diameter': '1.750', 'heater_pin': 'EBB36: PB13', 'sensor_pin': 'EBB36: PA3', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'min_temp': '0', 'max_temp': '300', 'max_power': '1.0', 'pwm_cycle_time': '0.0166', 'min_extrude_temp': '10', 'max_extrude_only_distance': '780', 'max_extrude_only_velocity': '120', 'max_extrude_cross_section': '5', 'pressure_advance': '0.0', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '24.094', 'pid_ki': '2.868', 'pid_kd': '50.598'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto'}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'interpolate': 'False', 'run_current': '0.300', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA5', 'sensor_pin': 'PA0', 'sensor_type': 'Generic 3950', 'smooth_time': '3.0', 'min_temp': '0', 'max_temp': '120', 'pwm_cycle_time': '0.0166', 'control': 'pid', 'pid_kp': '58.600', 'pid_ki': '3.520', 'pid_kd': '243.922'}, 'fan': {'pin': 'EBB36: PA0', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'EBB36: PA1', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan bed_fan': {'pin': 'PA4', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '60.0'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'temperature_sensor BTT_M5P': {'sensor_type': 'temperature_mcu', 'max_temp': '100'}, 'temperature_sensor EBB36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': '0', 'max_temp': '100'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '80,80', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, -13\n75, 197\n200, -13', 'points': '\n10, 5\n80, 140\n150, 5', 'speed': '100', 'horizontal_move_z': '10', 'retries': '10', 'retry_tolerance': '0.0075'}, 'bed_mesh': {'speed': '100', 'horizontal_move_z': '15', 'mesh_min': '20,20', 'mesh_max': '140,140', 'probe_count': '5,5', 'algorithm': 'bicubic'}, 'probe': {'pin': '^EBB36: PB9', 'x_offset': '0', 'y_offset': '0', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.495'}, 'board_pins': {'aliases': '\n\nEXP1_1=PD5, EXP1_3=PB3, EXP1_5=PB5, EXP1_7=PB7, EXP1_9=<GND>,\nEXP1_2=PD4,  EXP1_4=PD6, EXP1_6=PB4, EXP1_8=PB6, EXP1_10=<5V>,\n\nEXP2_1=PB14, EXP2_3=PB8, EXP2_5=PC10, EXP2_7=PC12,  EXP2_9=<GND>,\nEXP2_2=PB13, EXP2_4=PB9, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.032500, -0.045000, -0.032500, -0.012500, -0.032500\n-0.032500, -0.012500, 0.035000, -0.005000, 0.035000\n-0.057500, -0.042500, 0.007500, 0.015000, -0.017500\n-0.142500, -0.082500, -0.062500, -0.030000, -0.005000\n-0.202500, -0.155000, -0.102500, -0.092500, -0.030000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'lagrange', 'tension': '0.2', 'min_x': '20.0', 'max_x': '140.0', 'min_y': '20.0', 'max_y': '140.0'}, 'input_shaper': {'shaper_type_x': 'ei', 'shaper_freq_x': '80.6', 'shaper_type_y': '2hump_ei', 'shaper_freq_y': '74.0'}}, 'settings': {'mcu': {'canbus_uuid': 'b682b4dec3e8', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'mcu ebb36': {'canbus_uuid': 'bfd3856c73b0', 'canbus_interface': 'can0', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'command', 'default_prefix': '//'}, 'force_move': {'enable_force_move': True}, 'gcode_macro cancel_print': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\nM117 Print canceled\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(160)|int %}\n{% set Y = params.Y|default(160)|int %}\n{% set Z = params.Z|default(10)|int %}\n{% set E = params.E|default(1) %}\n\nPAUSE\nG91\nG1 E-{E} F2100\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_on': {'gcode': '\nM106 S255', 'description': 'G-Code macro'}, 'gcode_macro part_cooling_fan_off': {'gcode': '\nM106 S0', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\nG28\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}\n{% set ENCLOSURE_TEMP = params.ENCLOSURE_TEMP|default(45)|int %}\n{% set PROBE_TEMP = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}\n{% set FILAMENT = params.FILAMENT|default(PLA) %}\n\nSET_TEMP HEATER="bed" TEMP={BED_TEMP}\nSET_TEMP HEATER="extruder" TEMP={PROBE_TEMP} WAIT=1\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\nDISPLAYTEXT TEXT="Homing"\nG28\n{% endif %}\nDISPLAYTEXT TEXT="Heating Bed"\nSET_TEMP HEATER="bed" TEMP={BED_TEMP} WAIT=1\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\nDISPLAYTEXT TEXT="Heat soaking"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={ENCLOSURE_TEMP}\n{% endif %}\n{% if not printer.z_tilt.applied %}\nDISPLAYTEXT TEXT="Z tilt thingy"\nZ_TILT_ADJUST\n{% endif %}\nMATERIAL_PA MATERIAL={FILAMENT}\nDISPLAYTEXT TEXT="Heating Extruder"\nSET_TEMP HEATER="extruder" TEMP={EXTRUDER_TEMP} WAIT=1\n\nBED_MESH_CALIBRATE\nSET_FAN_SPEED FAN=rebreather SPEED=1\nSET_FAN_SPEED FAN=stepper_fans SPEED=0.25\nMATERIAL_PA MATERIAL={FILAMENT}\nG4 P1000\nLINE_PURGE\n{% if FILAMENT == \'ABS\' or FILAMENT == \'ASA\' %}\n{% endif %}\nDISPLAYTEXT TEXT="Printing..."', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\nG91\n\nG1 E-2 F1800\nG1 Z5 F3000\n\nG90\nG1 X160 Y160 F2000\n\nM140 S0\nM104 S0\nM106 S0\n\nM84\nM117 Print complete', 'description': 'G-Code macro'}, 'gcode_macro filament_load': {'gcode': '\nM83\nG1 E30 F300\nG1 E15 F150\nM82', 'description': 'G-Code macro'}, 'gcode_macro filament_unload': {'gcode': '\nM83\nG1 E10 F300\nG1 E-40 F1800\nM82', 'description': 'G-Code macro'}, 'gcode_macro heat_soak': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(110)%}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)%}\nM117 Heat Soak in progress..\n\nSTATUS_HEATING\nM140 S{BED_TEMP}\nTEMPERATURE_WAIT SENSOR=extruder MINIMUM=40\nM104 S{EXTRUDER_TEMP}\nM117 Heat Soak Complete!', 'description': 'G-Code macro'}, 'gcode_macro heat_and_resume': {'gcode': '\n\n{% set min_target = printer.configfile.config.extruder.min_extrude_temp|float %}\n\n{% set TARGET = params.TARGET|default(min_target)|float %}\n\nM109 S{TARGET}\n\nRESPOND TYPE=error MSG="Temperature reached. Resuming print."\n\n\n\nRESUME', 'description': 'Heat the extruder and resume print when target is reached'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("led_enable  : %d" % (led_enable))  }\n{ action_respond_info("status_macro: \\\'%s\\\'" % (status_macro))  }\n{ action_respond_info("fuzz_enable : %d" % (fuzz_enable))  }\n{ action_respond_info("fuzz_min    : %f" % (fuzz_min))  }\n{ action_respond_info("fuzz_max    : %f" % (fuzz_max))  }\n{ action_respond_info("probe_dock_enable: %d" % (probe_dock_enable))  }\n{ action_respond_info("attach_macro: \\\'%s\\\'" % (attach_macro))  }\n{ action_respond_info("detach_macro: \\\'%s\\\'" % (detach_macro))  }\n{% endif %}\n\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}\n{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}\n{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}\n{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}\n{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}\n{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}\n{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}\n{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}\n{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}\n{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}\n\n{% if margin_enable == False %}\n{% set margin_size = 0 %}\n{% endif %}\n\n{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(\nall_points | count,\nbed_mesh_min,\nbed_mesh_max,\n)) }\n\n{% if fuzz_enable == True %}\n{% set fuzz_range = range((fuzz_min * 100) | int, (fuzz_max * 100) | int + 1) %}\n{% set x_min = (bed_mesh_min[0] + fuzz_max - margin_size, x_min) | max - (fuzz_range | random / 100.0) %}\n{% set y_min = (bed_mesh_min[1] + fuzz_max - margin_size, y_min) | max - (fuzz_range | random / 100.0) %}\n{% set x_max = (bed_mesh_max[0] - fuzz_max + margin_size, x_max) | min + (fuzz_range | random / 100.0) %}\n{% set y_max = (bed_mesh_max[1] - fuzz_max + margin_size, y_max) | min + (fuzz_range | random / 100.0) %}\n{% else %}\n{% set x_min = [ bed_mesh_min[0], x_min - margin_size ] | max %}\n{% set y_min = [ bed_mesh_min[1], y_min - margin_size ] | max %}\n{% set x_max = [ bed_mesh_max[0], x_max + margin_size ] | min %}\n{% set y_max = [ bed_mesh_max[1], y_max + margin_size ] | min %}\n{% endif %}\n\n{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(\n(x_min, y_min),\n(x_max, y_max),\n)) }\n\n{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method=\'ceil\') | int) + 1 %}\n{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method=\'ceil\') | int) + 1 %}\n\n{% if (([points_x, points_y]|max) > 6) %}\n{% set algorithm = "bicubic" %}\n{% set min_points = 4 %}\n{% else %}\n{% set algorithm = "lagrange" %}\n{% set min_points = 3 %}\n{% endif %}\n{ action_respond_info( "Algorithm: {}".format(algorithm)) }\n\n{% set points_x = [points_x, min_points]|max  %}\n{% set points_y = [points_y, min_points]|max  %}\n{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }\n\n{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}\n{% set ref_index = (points_x * points_y / 2) | int %}\n{ action_respond_info( "Reference index: {}".format(ref_index) ) }\n{% else %}\n{% set ref_index = -1 %}\n{% endif %}\n\n{% if probe_dock_enable == True %}\n{attach_macro}\n{% endif %}\n\n{% if led_enable == True %}\n{status_macro}\n{% endif %}\n\n_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}\n\n{% if probe_dock_enable == True %}\n{detach_macro}\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_led_enable': 'False', 'variable_status_macro': "'status_meshing'", 'variable_fuzz_enable': 'False', 'variable_fuzz_min': '0', 'variable_fuzz_max': '4', 'variable_margin_enable': 'False', 'variable_margin_size': '5', 'variable_probe_dock_enable': 'False', 'variable_attach_macro': "'Attach_Probe'", 'variable_detach_macro': "'Dock_Probe'", 'variable_display_parameters': 'True'}, 'gcode_macro setup_kamp_meshing': {'gcode': '\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=led_enable   VALUE={params.LED_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=status_macro VALUE=\'"{params.STATUS_MACRO|default(\'status_meshing\')|string}"\'\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_enable VALUE={params.FUZZ_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_min    VALUE={params.FUZZ_MIN|default(0)|float}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=fuzz_max    VALUE={params.FUZZ_MAX|default(4)|float}\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probe_dock_enable  VALUE={params.PROBE_DOCK_ENABLE|default(False)|int}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=attach_macro VALUE=\'"{params.ATTACH_MACRO|default(\'Attach_Probe\')|string}"\'\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=detach_macro VALUE=\'"{params.DETACH_MACRO|default(\'Dock_Probe\')|string}"\'', 'description': 'G-Code macro'}, 'gcode_macro line_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }\n{ action_respond_info("z_height        : %f" % (z_height))  }\n{ action_respond_info("purge_amount    : %f" % (purge_amount))  }\n{ action_respond_info("line_length     : %f" % (line_length))  }\n{ action_respond_info("flow_rate       : %f" % (flow_rate))  }\n{ action_respond_info("x_default       : %f" % (x_default))  }\n{ action_respond_info("y_default       : %f" % (y_default))  }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}\n{% set cross_section = nozzle_dia * z_height | float %}\n{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}\n{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}\n\nG92 E0\nG0 F{travel_speed}\nG90\nG0 X{x_origin} Y{y_origin - distance_to_object_y}\nG0 Z{z_height}\nM83\nG1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height * 2} F{travel_speed}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_purge_amount': '40', 'variable_line_length': '50', 'variable_flow_rate': '12', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_line_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ['x', 'y', 'z'], 'rate': 3200, 'cs_pin': 'EBB36: PB12', 'spi_speed': 5000000, 'spi_software_sclk_pin': 'EBB36: PB10', 'spi_software_miso_pin': 'EBB36: PB2', 'spi_software_mosi_pin': 'EBB36: PB11'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[80.0, 80.0, 30.0]], 'accel_chip': 'adxl345', 'max_smoothing': 0.1}, 'autotune_tmc stepper_x': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_x': {'uart_pin': 'PD9', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PC8', 'dir_pin': 'PC9', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^EBB36: PB3', 'position_endstop': 165.0, 'position_min': 0.0, 'position_max': 165.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_y': {'motor': 'dfh-14mcrn-1848', 'tuning_goal': 'performance', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_y': {'uart_pin': 'PD8', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA13', 'endstop_pin': '^PC2', 'position_endstop': 170.0, 'position_min': 0.0, 'position_max': 170.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'autotune_tmc stepper_z': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z': {'uart_pin': 'PB10', 'uart_address': 0, 'diag_pin': 'PC3', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PC6', 'dir_pin': '!PC7', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA9', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -10.0, 'position_max': 150.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'autotune_tmc stepper_z1': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z1': {'uart_pin': 'PB2', 'uart_address': 0, 'diag_pin': 'PC2', 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 16, 'step_pin': 'PB12', 'dir_pin': '!PB11', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA8'}, 'autotune_tmc stepper_z2': {'motor': 'fysetc-42hsc1404b-200n8', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 stepper_z2': {'uart_pin': 'PA6', 'uart_address': 0, 'run_current': 0.2, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PB0', 'dir_pin': '!PB1', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC4'}, 'autotune_tmc extruder': {'motor': 'dfh-14mcrn-1815', 'tuning_goal': 'auto', 'extra_hysteresis': 0, 'tbl': 1, 'sgt': 1, 'sg4_thrs': 40, 'voltage': 24.0, 'pwm_freq_target': 55000.0}, 'tmc2209 extruder': {'uart_pin': 'EBB36: PA15', 'uart_address': 0, 'run_current': 0.3, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'EBB36: PA3', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 10.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 24.094, 'pid_ki': 2.868, 'pid_kd': 50.598, 'heater_pin': 'EBB36: PB13', 'pwm_cycle_time': 0.0166, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 5.0, 'max_extrude_only_velocity': 120.0, 'max_extrude_only_accel': 1330.4054018457214, 'max_extrude_only_distance': 780.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'EBB36: PD0', 'pressure_advance': 0.0, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'EBB36: PD1', 'rotation_distance': 22.4523, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!EBB36: PD2'}, 'heater_bed': {'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 3.0, 'control': 'pid', 'pid_kp': 58.6, 'pid_ki': 3.52, 'pid_kd': 243.922, 'heater_pin': 'PA5', 'pwm_cycle_time': 0.0166}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'EBB36: PA0'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'EBB36: PA1', 'fan_speed': 1.0}, 'heater_fan bed_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PA4', 'fan_speed': 1.0}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'temperature_sensor btt_m5p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 100.0}, 'temperature_sensor ebb36': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'EBB36', 'min_temp': 0.0, 'max_temp': 100.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [80.0, 80.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, -13.0], [75.0, 197.0], [200.0, -13.0]], 'retries': 10, 'retry_tolerance': 0.0075, 'points': [[10.0, 5.0], [80.0, 140.0], [150.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 100.0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 20.0], 'mesh_max': [140.0, 140.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 15.0, 'speed': 100.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.0325, -0.045, -0.0325, -0.0125, -0.0325], [-0.0325, -0.0125, 0.035, -0.005, 0.035], [-0.0575, -0.0425, 0.0075, 0.015, -0.0175], [-0.1425, -0.0825, -0.0625, -0.03, -0.005], [-0.2025, -0.155, -0.1025, -0.0925, -0.03]], 'min_x': 20.0, 'max_x': 140.0, 'min_y': 20.0, 'max_y': 140.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'lagrange', 'tension': 0.2}, 'probe': {'z_offset': -0.495, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': '^EBB36: PB9', 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PD5'], ['EXP1_3', 'PB3'], ['EXP1_5', 'PB5'], ['EXP1_7', 'PB7'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PD4'], ['EXP1_4', 'PD6'], ['EXP1_6', 'PB4'], ['EXP1_8', 'PB6'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PB14'], ['EXP2_3', 'PB8'], ['EXP2_5', 'PC10'], ['EXP2_7', 'PC12'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PB13'], ['EXP2_4', 'PB9'], ['EXP2_6', 'PB15'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'ei', 'damping_ratio_x': 0.1, 'shaper_freq_x': 80.6, 'shaper_type_y': '2hump_ei', 'damping_ratio_y': 0.1, 'shaper_freq_y': 74.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 5000.0, 'max_accel_to_decel': 1000.0, 'minimum_cruise_ratio': 0.8, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 200.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [{'type': 'deprecated_option', 'message': "Option 'max_accel_to_decel' in section 'printer' is deprecated.", 'section': 'printer', 'option': 'max_accel_to_decel'}], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-04-22 21:12:48,149 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-04-22 21:12:48,150 [printer.py:reinit()] - Klipper version: v0.12.0-171-g2f6e94c9-dirty
2024-04-22 21:12:48,150 [printer.py:reinit()] - # Extruders: 1
2024-04-22 21:12:48,150 [printer.py:reinit()] - # Temperature devices: 4
2024-04-22 21:12:48,150 [printer.py:reinit()] - # Fans: 3
2024-04-22 21:12:48,150 [printer.py:reinit()] - # Output pins: 0
2024-04-22 21:12:48,150 [printer.py:reinit()] - # Leds: 0
2024-04-22 21:12:48,150 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-04-22 21:12:48,164 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-04-22 21:12:48,166 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor CB1&temperature_sensor BTT_M5P&temperature_sensor EBB36&fan&heater_fan hotend_fan&heater_fan bed_fan
2024-04-22 21:12:48,423 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-04-22 21:12:48,423 [screen.py:init_klipper()] - Printer initialized
2024-04-22 21:12:48,423 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-04-22 21:12:48,424 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 21:12:48,425 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-04-22 21:12:48,428 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 21:12:48,509 [main_menu.py:__init__()] - ### Making MainMenu
2024-04-22 21:12:48,516 [main_menu.py:add_device()] - Adding device: extruder
2024-04-22 21:12:48,521 [main_menu.py:add_device()] - Adding device: heater_bed
2024-04-22 21:12:48,527 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-04-22 21:12:48,532 [main_menu.py:add_device()] - Adding device: temperature_sensor BTT_M5P
2024-04-22 21:12:48,538 [main_menu.py:add_device()] - Adding device: temperature_sensor EBB36
2024-04-22 21:12:48,571 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-04-22 21:12:48,573 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-04-22 21:12:48,600 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor CB1', 'temperature_sensor BTT_M5P', 'temperature_sensor EBB36', 'extruder']
2024-04-22 21:12:48,602 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-04-22 21:12:48,614 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-04-22 21:12:51,477 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:13:31,503 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-04-22 21:13:31,503 [printer.py:change_state()] - Adding callback for state: printing
2024-04-22 21:13:31,518 [screen.py:show_panel()] - Reinitializing panel
2024-04-22 21:13:31,637 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-04-22 21:13:31,641 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-04-22 21:13:31,649 [job_status.py:update_file_metadata()] - Update Metadata. File: OrcaCube_ABS_38m23s.gcode Size: 3894328
2024-04-22 21:13:31,654 [job_status.py:show_file_thumbnail()] - OrcaCube_ABS_38m23s.gcode
2024-04-22 21:18:22,513 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PRINT_START:gcode': jinja2.exceptions.UndefinedError: 'extras.gcode_macro.GetStatusWrapper object' has no attribute 'gcode_macro MACROS_VARS'
2024-04-22 21:18:22,539 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-04-22 21:18:22,539 [printer.py:change_state()] - Adding callback for state: ready
2024-04-22 21:18:22,558 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'error'
