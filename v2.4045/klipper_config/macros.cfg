[include stealthburner_leds.cfg]
[include klicky/klicky-probe.cfg]
[include nozzle_scrub.cfg]

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    CLEAN_NOZZLE
    G28
    SET_GCODE_OFFSET Z=0
    BED_MESH_CALIBRATE             ; generate the bed mesh
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
[bed_mesh]
speed: 325
horizontal_move_z: 8
mesh_min: 30, 30
mesh_max: 320,320
##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 7,7
algorithm: bicubic
#relative_reference_index: 40

[exclude_object]
[quad_gantry_level]

gantry_corners:
   -60,-10
   410,420
##  Probe points
points:
   50,25
   50,275
   300,275
   300,25
speed: 200
horizontal_move_z: 25
retries: 10
retry_tolerance: 0.01
max_adjust: 10

[gcode_macro PID_TUNE]
gcode:
    G28
    G1 Z10 F7800
    M106 S64
    PID_CALIBRATE HEATER=extruder TARGET=245
    SAVE_CONFIG


[gcode_macro PRINT_START]
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
      SET_FAN_SPEED FAN=filter SPEED=1     ; turn off Nevermore filter
    {% set BED = params.BED|default(55)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(205)|int %}
    G28 X Y
    # Loading extruder and bed temperature
    M104 S170
    M140 S{BED} 
    RESPOND PREFIX= MSG="Waiting for temperatures..."
    M117  Waiting for temperatures...
    M190 S{BED}
    RESPOND PREFIX= MSG="Waiting for thermal expansion..."
    M117 Waiting for thermal expansion...
    G4 P30000
    RESPOND PREFIX= MSG="Creating a mesh..."
    M117 Creating a mesh...
    G28
    CLEAN_NOZZLE
    G28
    _Probe_Unlock
    ATTACH_PROBE_LOCK
    QUAD_GANTRY_LEVEL
    DOCK_PROBE_UNLOCK
    BED_MESH_CALIBRATE

    M104 S{EXTRUDER}

    # Move to prime position
    RESPOND PREFIX= MSG="Moving to prime position"
    M117 Moving to prime position
    G1 X25 Y-2 Z10 F5000.0
    {% if printer.extruder.temperature < params.EXTRUDER|float*0.98 %}
        M109 S{params.EXTRUDER|float*0.98} # wait till 0.85 of bed temp is reached, then continue  
    {% endif %}
    M104 S{EXTRUDER}
    G4 P30000
    ADAPTIVE_PURGE 
    RESPOND PREFIX= MSG="Printing..."
    M117 Printing...
    M117

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                     ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000 ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                    ; turn off fan
    SET_FAN_SPEED FAN=filter SPEED=0.0      ; turn off Nevermore filter

    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro TOGGLE_CASELIGHT]
#   Toggle the caselight on or off
gcode:
    SET_PIN PIN=caselight VALUE={0 if printer['output_pin caselight'].value else 1 }
    
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}




[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				Z_TILT
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED